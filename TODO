# Задания

## feat(cli): add `format` command

`format` — команда, которая форматирует QSP код.

```bash
qsp-toolbox format game.qsps
```

<!-- todo: описать дополнительные параметры -->

### Сложности реализации

Никаких, потому что это уже реализовано в ядре и используется в расширении VS Code. Осталось только вывести всё это в аргументы программы.

### Альтернативные названия команды

Возможно, стоит пересмотреть название команды, а может, и так пойдет. В любом случае вот список примеров:

* pretty print — в инспекторе JS кода Firefox
* prettier — такой NPM пакет
* fantomas — ни на что непохожая по названию утилита для форматирования F# кода

## Прочие

* Спросить у Байта насчёт `obj add 'Зелье'`: оно выглядит как statement, но но при этом не подчиняется синтаксису: `proc arg1, arg2, ...`

Синтаксис:
    ☐ Вызов процедуры `The(Lady), 'or', the, Tiger`. Сейчас такое `*p(Lady), 'or', the, Tiger` работает
    ☐ Если конструкция `if`/`act` обрывается на завершении локации, то можно так и сказать, а не расписывать полотно с ожидаемыми инструкциями
    ☐ Парсить лишние `)`, но помечать их как ошибки
    ☐ Как-то нужно определять, что конструкция `for` разрешена или нет
    ☐ `gs 'loc', , 1` — пропуск аргумента. В QSP 5.7.0 под Windows не работает, но работает в Quest Navigator, кажется.

Статический анализ:
    ☐ Удаление предмета, который нигде не добавляется
    ☐ Переменная присваивается, но ни разу не используется (заданные переменные — исключение)
    ☐ Переменная используется, но ни разу не присваивается (заданные переменные — исключение)
    ☐ Инструкции после `exit`, `jump` и прочих операторов перехода не сработают
    ☐ `a = 'foo'`, `#a = 'foo'`, `a[expr] = 'foo'`, `#a[expr] = 'foo'`

Highlight:
    ☐ Label highlight in `func('label')` or `$func('label')`

Форматирование:
    ☐ `stmt & ! comment`
