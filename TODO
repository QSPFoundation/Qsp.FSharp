Синтаксис:
    ✔ Однострочный `else` @done(20-07-06 20:37)
    ☐ `_` в выражениях
    ☐ `if x = 10: ! comment`
    ☐ Вызов процедуры `The(Lady), or, the, Tiger`
    ☐ Допускать на уровне синтаксиса неопределенные процедуры со звездочкой (например, `*proc`), а уже на уровне семантики запрещать
    ☐ Лишний `end`
    ☐ Бардак с комментариями
Подсказки:
    ☐ Ключевые слова
    ☐ Функции
    ☐ Процедуры
Семантика:
    ☐ Убедиться, что все переменные точно глобальные
    ☐ Вызов несуществующей функции/процедуры
    ☐ Переопределение процедур/функций
    ☐ Количество аргументов к функциям/процедурам
    ☐ Переменная присваивается, но ни разу не используется (заданные переменные — исключение)
    ☐ Переменная используется, но ни разу не присваивается (заданные переменные — исключение)
    Явные ошибки присваивания:
        ☐ `a = 'foo'`, `#a = 'foo'`, `a[expr] = 'foo'`, `#a[expr] = 'foo'`
    ☐ Разобраться, почему parser всё еще допускает `proc call someAnotherStatement`, хотя изначально нужен `&`: `proc call & someAnotherStatement`. Явно что-то упустил, да и код станет понятнее, если инструкции как-то явно разбивать.
Highlight:
    ✔ Комментарий все еще не разбивает токены на несколько `Range` @done(20-07-06 11:29)
    ☐ Однотонный цвет комментария
    ☐ @low бинарные операторы
    ☐ В строках есть подстановка `'<<expr>>'`
Форматирование:
    ☐ `stmt & ! comment`
    ☐ Убрать пробел после вызова процедуры без аргументов, например, `*pl `
    ☐ Разбивать строки, если они разделены `\n` (сделать выборочно)
    ☐ `$str = {}` превращает в:
      ```qsp
      $str = {

      }
      ```
