* Спросить у Байта насчёт `obj add 'Зелье'`: оно выглядит как statement, но но при этом не подчиняется синтаксису: `proc arg1, arg2, ...`
* добавить в issue "feat(cli): add inline statements count statistics"

Синтаксис:
    ☐ `if x = 10: ! comment`
    ☐ Вызов процедуры `The(Lady), 'or', the, Tiger`. Сейчас такое `*p(Lady), 'or', the, Tiger` работает
    ☐ Сделать полноценный HTML-parser
    ☐ Если конструкция `if`/`act` обрывается на завершении локации, то можно так и сказать, а не расписывать полотно с ожидаемыми инструкциями
    ☐ Парсить лишние `)`, но помечать их как ошибки
    ☐ `for нечётные = 1 to 10 step 2: *pl нечётные`
    ☐ Как-то нужно определять, что конструкция `for` разрешена или нет
    ☐ `gs 'loc', , 1` — пропуск аргумента. В QSP 5.7.0 под Windows не работает, но работает в Quest Navigator, кажется.

Семантика:
    ☐ `local v = 1` — жуть, правда? В Quest Navigator'е есть, а в QSP 5.7.0 под Windows нету. Синтаксически проходит как процедура `local` с параметром `v = 1`, так что дело за семантикой
    ☐ А ведь переменные `args` и `$curloc` для каждой локации локальны, значит, пришло время строить что-то более серьезное с областью видимости переменных.

Статический анализ:
    ☐ Удаление предмета, который нигде не добавляется
    ☐ Переменная присваивается, но ни разу не используется (заданные переменные — исключение)
    ☐ Переменная используется, но ни разу не присваивается (заданные переменные — исключение)
    ☐ Инструкции после `exit`, `jump` и прочих операторов перехода не сработают
    ☐ `a = 'foo'`, `#a = 'foo'`, `a[expr] = 'foo'`, `#a[expr] = 'foo'`

Highlight:
    ☐ Label highlight in `func('label')` or `$func('label')`
Форматирование:
    ☐ `stmt & ! comment`
