// Signature file for parser generated by fsyacc
module QSParser
type token = 
  | NEQ
  | EQP
  | EQM
  | INC
  | DECR
  | SET
  | LET
  | END
  | NEWLINE
  | COLON
  | ELSE
  | ELSEIF
  | IF
  | ACT
  | DOLLAR
  | SHARP
  | EOF
  | NO
  | OBJ
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | AMP
  | COMMA
  | AND
  | OR
  | MOD
  | EQ
  | GT
  | GE
  | LT
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ENDLOC
  | STARTLOC of (string)
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
  | COMMENT of (string)
  | TSTRING of (string)
type tokenId = 
    | TOKEN_NEQ
    | TOKEN_EQP
    | TOKEN_EQM
    | TOKEN_INC
    | TOKEN_DECR
    | TOKEN_SET
    | TOKEN_LET
    | TOKEN_END
    | TOKEN_NEWLINE
    | TOKEN_COLON
    | TOKEN_ELSE
    | TOKEN_ELSEIF
    | TOKEN_IF
    | TOKEN_ACT
    | TOKEN_DOLLAR
    | TOKEN_SHARP
    | TOKEN_EOF
    | TOKEN_NO
    | TOKEN_OBJ
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_AMP
    | TOKEN_COMMA
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_MOD
    | TOKEN_EQ
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_ENDLOC
    | TOKEN_STARTLOC
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_COMMENT
    | TOKEN_TSTRING
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM__startparseStatements
    | NONTERM_start
    | NONTERM_parseStatements
    | NONTERM_loc
    | NONTERM_end_
    | NONTERM_elseif
    | NONTERM_statements
    | NONTERM_states
    | NONTERM_id
    | NONTERM_temp
    | NONTERM_state
    | NONTERM_ass
    | NONTERM_assertOp
    | NONTERM_seq_
    | NONTERM_seqval
    | NONTERM_expr
    | NONTERM_val_
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (QS.Location list) 
val parseStatements : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (QS.Statements list) 
