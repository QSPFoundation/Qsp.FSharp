Output file describing compiled parser placed in C:\All\Project\Parsers\QSParse\QSParse\QSParser.fs and C:\All\Project\Parsers\QSParse\QSParse\QSParser.fsi
------------------------
states = 
state 0:
  items:
    _startstart ->  . start

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 6
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   shift 5
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   shift 14
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   shift 4
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto start: 1
    goto loc: 8

state 1:
  items:
    _startstart -> start . 

  actions:
    action 'NEQ' (noprec):   accept
    action 'EQP' (noprec):   accept
    action 'EQM' (noprec):   accept
    action 'INC' (noprec):   accept
    action 'DECR' (noprec):   accept
    action 'SET' (noprec):   accept
    action 'LET' (noprec):   accept
    action 'END' (noprec):   accept
    action 'NEWLINE' (noprec):   accept
    action 'COLON' (noprec):   accept
    action 'ELSE' (noprec):   accept
    action 'ELSEIF' (noprec):   accept
    action 'IF' (noprec):   accept
    action 'ACT' (noprec):   accept
    action 'DOLLAR' (noprec):   accept
    action 'SHARP' (noprec):   accept
    action 'EOF' (noprec):   accept
    action 'NO' (noprec):   accept
    action 'OBJ' (noprec):   accept
    action 'LPAREN' (noprec):   accept
    action 'RPAREN' (noprec):   accept
    action 'LBRACK' (noprec):   accept
    action 'RBRACK' (noprec):   accept
    action 'LBRACE' (noprec):   accept
    action 'RBRACE' (noprec):   accept
    action 'AMP' (noprec):   accept
    action 'COMMA' (noprec):   accept
    action 'AND' (noprec):   accept
    action 'OR' (noprec):   accept
    action 'MOD' (noprec):   accept
    action 'EQ' (noprec):   accept
    action 'GT' (noprec):   accept
    action 'GE' (noprec):   accept
    action 'LT' (noprec):   accept
    action 'LE' (noprec):   accept
    action 'PLUS' (noprec):   accept
    action 'MINUS' (noprec):   accept
    action 'TIMES' (noprec):   accept
    action 'DIVIDE' (noprec):   accept
    action 'ENDLOC' (noprec):   accept
    action 'STARTLOC' (noprec):   accept
    action 'FLOAT' (noprec):   accept
    action 'INT' (noprec):   accept
    action 'ID' (noprec):   accept
    action 'COMMENT' (noprec):   accept
    action 'TSTRING' (noprec):   accept
    action 'error' (noprec):   accept
    action '#' (noprec):   accept
    action '$$' (noprec):   accept

  immediate action:   accept
 gotos:

state 2:
  items:
    _startparseStatements ->  . parseStatements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (explicit left 9995):   shift 10
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   shift 12
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto parseStatements: 3
    goto statements: 13
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 3:
  items:
    _startparseStatements -> parseStatements . 

  actions:
    action 'NEQ' (noprec):   accept
    action 'EQP' (noprec):   accept
    action 'EQM' (noprec):   accept
    action 'INC' (noprec):   accept
    action 'DECR' (noprec):   accept
    action 'SET' (noprec):   accept
    action 'LET' (noprec):   accept
    action 'END' (noprec):   accept
    action 'NEWLINE' (noprec):   accept
    action 'COLON' (noprec):   accept
    action 'ELSE' (noprec):   accept
    action 'ELSEIF' (noprec):   accept
    action 'IF' (noprec):   accept
    action 'ACT' (noprec):   accept
    action 'DOLLAR' (noprec):   accept
    action 'SHARP' (noprec):   accept
    action 'EOF' (noprec):   accept
    action 'NO' (noprec):   accept
    action 'OBJ' (noprec):   accept
    action 'LPAREN' (noprec):   accept
    action 'RPAREN' (noprec):   accept
    action 'LBRACK' (noprec):   accept
    action 'RBRACK' (noprec):   accept
    action 'LBRACE' (noprec):   accept
    action 'RBRACE' (noprec):   accept
    action 'AMP' (noprec):   accept
    action 'COMMA' (noprec):   accept
    action 'AND' (noprec):   accept
    action 'OR' (noprec):   accept
    action 'MOD' (noprec):   accept
    action 'EQ' (noprec):   accept
    action 'GT' (noprec):   accept
    action 'GE' (noprec):   accept
    action 'LT' (noprec):   accept
    action 'LE' (noprec):   accept
    action 'PLUS' (noprec):   accept
    action 'MINUS' (noprec):   accept
    action 'TIMES' (noprec):   accept
    action 'DIVIDE' (noprec):   accept
    action 'ENDLOC' (noprec):   accept
    action 'STARTLOC' (noprec):   accept
    action 'FLOAT' (noprec):   accept
    action 'INT' (noprec):   accept
    action 'ID' (noprec):   accept
    action 'COMMENT' (noprec):   accept
    action 'TSTRING' (noprec):   accept
    action 'error' (noprec):   accept
    action '#' (noprec):   accept
    action '$$' (noprec):   accept

  immediate action:   accept
 gotos:

state 4:
  items:
    start -> 'error' . 
    loc -> 'error' . 

  actions:
    action 'NEQ' (noprec):   reduce start --> 'error'
    action 'EQP' (noprec):   reduce start --> 'error'
    action 'EQM' (noprec):   reduce start --> 'error'
    action 'INC' (noprec):   reduce start --> 'error'
    action 'DECR' (noprec):   reduce start --> 'error'
    action 'SET' (noprec):   reduce start --> 'error'
    action 'LET' (noprec):   reduce start --> 'error'
    action 'END' (noprec):   reduce start --> 'error'
    action 'NEWLINE' (noprec):   reduce loc --> 'error'
    action 'COLON' (noprec):   reduce start --> 'error'
    action 'ELSE' (noprec):   reduce start --> 'error'
    action 'ELSEIF' (noprec):   reduce start --> 'error'
    action 'IF' (noprec):   reduce start --> 'error'
    action 'ACT' (noprec):   reduce start --> 'error'
    action 'DOLLAR' (noprec):   reduce start --> 'error'
    action 'SHARP' (noprec):   reduce start --> 'error'
    action 'EOF' (noprec):   reduce loc --> 'error'
    action 'NO' (noprec):   reduce start --> 'error'
    action 'OBJ' (noprec):   reduce start --> 'error'
    action 'LPAREN' (noprec):   reduce start --> 'error'
    action 'RPAREN' (noprec):   reduce start --> 'error'
    action 'LBRACK' (noprec):   reduce start --> 'error'
    action 'RBRACK' (noprec):   reduce start --> 'error'
    action 'LBRACE' (noprec):   reduce start --> 'error'
    action 'RBRACE' (noprec):   reduce start --> 'error'
    action 'AMP' (noprec):   reduce start --> 'error'
    action 'COMMA' (noprec):   reduce start --> 'error'
    action 'AND' (noprec):   reduce start --> 'error'
    action 'OR' (noprec):   reduce start --> 'error'
    action 'MOD' (noprec):   reduce start --> 'error'
    action 'EQ' (noprec):   reduce start --> 'error'
    action 'GT' (noprec):   reduce start --> 'error'
    action 'GE' (noprec):   reduce start --> 'error'
    action 'LT' (noprec):   reduce start --> 'error'
    action 'LE' (noprec):   reduce start --> 'error'
    action 'PLUS' (noprec):   reduce start --> 'error'
    action 'MINUS' (noprec):   reduce start --> 'error'
    action 'TIMES' (noprec):   reduce start --> 'error'
    action 'DIVIDE' (noprec):   reduce start --> 'error'
    action 'ENDLOC' (noprec):   reduce start --> 'error'
    action 'STARTLOC' (noprec):   reduce loc --> 'error'
    action 'FLOAT' (noprec):   reduce start --> 'error'
    action 'INT' (noprec):   reduce start --> 'error'
    action 'ID' (noprec):   reduce start --> 'error'
    action 'COMMENT' (noprec):   reduce start --> 'error'
    action 'TSTRING' (noprec):   reduce start --> 'error'
    action 'error' (noprec):   reduce loc --> 'error'
    action '#' (noprec):   reduce start --> 'error'
    action '$$' (noprec):   reduce start --> 'error'

  immediate action: <none>
 gotos:

state 5:
  items:
    start -> 'EOF' . 

  actions:
    action 'NEQ' (noprec):   reduce start --> 'EOF'
    action 'EQP' (noprec):   reduce start --> 'EOF'
    action 'EQM' (noprec):   reduce start --> 'EOF'
    action 'INC' (noprec):   reduce start --> 'EOF'
    action 'DECR' (noprec):   reduce start --> 'EOF'
    action 'SET' (noprec):   reduce start --> 'EOF'
    action 'LET' (noprec):   reduce start --> 'EOF'
    action 'END' (noprec):   reduce start --> 'EOF'
    action 'NEWLINE' (noprec):   reduce start --> 'EOF'
    action 'COLON' (noprec):   reduce start --> 'EOF'
    action 'ELSE' (noprec):   reduce start --> 'EOF'
    action 'ELSEIF' (noprec):   reduce start --> 'EOF'
    action 'IF' (noprec):   reduce start --> 'EOF'
    action 'ACT' (noprec):   reduce start --> 'EOF'
    action 'DOLLAR' (noprec):   reduce start --> 'EOF'
    action 'SHARP' (noprec):   reduce start --> 'EOF'
    action 'EOF' (noprec):   reduce start --> 'EOF'
    action 'NO' (noprec):   reduce start --> 'EOF'
    action 'OBJ' (noprec):   reduce start --> 'EOF'
    action 'LPAREN' (noprec):   reduce start --> 'EOF'
    action 'RPAREN' (noprec):   reduce start --> 'EOF'
    action 'LBRACK' (noprec):   reduce start --> 'EOF'
    action 'RBRACK' (noprec):   reduce start --> 'EOF'
    action 'LBRACE' (noprec):   reduce start --> 'EOF'
    action 'RBRACE' (noprec):   reduce start --> 'EOF'
    action 'AMP' (noprec):   reduce start --> 'EOF'
    action 'COMMA' (noprec):   reduce start --> 'EOF'
    action 'AND' (noprec):   reduce start --> 'EOF'
    action 'OR' (noprec):   reduce start --> 'EOF'
    action 'MOD' (noprec):   reduce start --> 'EOF'
    action 'EQ' (noprec):   reduce start --> 'EOF'
    action 'GT' (noprec):   reduce start --> 'EOF'
    action 'GE' (noprec):   reduce start --> 'EOF'
    action 'LT' (noprec):   reduce start --> 'EOF'
    action 'LE' (noprec):   reduce start --> 'EOF'
    action 'PLUS' (noprec):   reduce start --> 'EOF'
    action 'MINUS' (noprec):   reduce start --> 'EOF'
    action 'TIMES' (noprec):   reduce start --> 'EOF'
    action 'DIVIDE' (noprec):   reduce start --> 'EOF'
    action 'ENDLOC' (noprec):   reduce start --> 'EOF'
    action 'STARTLOC' (noprec):   reduce start --> 'EOF'
    action 'FLOAT' (noprec):   reduce start --> 'EOF'
    action 'INT' (noprec):   reduce start --> 'EOF'
    action 'ID' (noprec):   reduce start --> 'EOF'
    action 'COMMENT' (noprec):   reduce start --> 'EOF'
    action 'TSTRING' (noprec):   reduce start --> 'EOF'
    action 'error' (noprec):   reduce start --> 'EOF'
    action '#' (noprec):   reduce start --> 'EOF'
    action '$$' (noprec):   reduce start --> 'EOF'

  immediate action:   reduce start --> 'EOF'
 gotos:

state 6:
  items:
    start -> 'NEWLINE' . start

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 6
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   shift 5
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   shift 14
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   shift 4
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto start: 7
    goto loc: 8

state 7:
  items:
    start -> 'NEWLINE' start . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'EQP' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'EQM' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'INC' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'DECR' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'SET' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'LET' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'END' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'NEWLINE' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'COLON' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'ELSE' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'ELSEIF' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'IF' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'ACT' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'DOLLAR' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'SHARP' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'EOF' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'NO' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'OBJ' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'LPAREN' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'RPAREN' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'LBRACK' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'RBRACK' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'LBRACE' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'RBRACE' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'AMP' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'COMMA' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'AND' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'OR' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'MOD' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'EQ' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'GT' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'GE' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'LT' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'LE' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'PLUS' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'MINUS' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'TIMES' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'DIVIDE' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'ENDLOC' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'STARTLOC' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'FLOAT' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'INT' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'ID' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'COMMENT' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'TSTRING' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action 'error' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action '#' (explicit left 9995):   reduce start --> 'NEWLINE' start
    action '$$' (explicit left 9995):   reduce start --> 'NEWLINE' start

  immediate action:   reduce start --> 'NEWLINE' start
 gotos:

state 8:
  items:
    start -> loc . start

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 6
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   shift 5
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   shift 14
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   shift 4
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto start: 9
    goto loc: 8

state 9:
  items:
    start -> loc start . 

  actions:
    action 'NEQ' (noprec):   reduce start --> loc start
    action 'EQP' (noprec):   reduce start --> loc start
    action 'EQM' (noprec):   reduce start --> loc start
    action 'INC' (noprec):   reduce start --> loc start
    action 'DECR' (noprec):   reduce start --> loc start
    action 'SET' (noprec):   reduce start --> loc start
    action 'LET' (noprec):   reduce start --> loc start
    action 'END' (noprec):   reduce start --> loc start
    action 'NEWLINE' (noprec):   reduce start --> loc start
    action 'COLON' (noprec):   reduce start --> loc start
    action 'ELSE' (noprec):   reduce start --> loc start
    action 'ELSEIF' (noprec):   reduce start --> loc start
    action 'IF' (noprec):   reduce start --> loc start
    action 'ACT' (noprec):   reduce start --> loc start
    action 'DOLLAR' (noprec):   reduce start --> loc start
    action 'SHARP' (noprec):   reduce start --> loc start
    action 'EOF' (noprec):   reduce start --> loc start
    action 'NO' (noprec):   reduce start --> loc start
    action 'OBJ' (noprec):   reduce start --> loc start
    action 'LPAREN' (noprec):   reduce start --> loc start
    action 'RPAREN' (noprec):   reduce start --> loc start
    action 'LBRACK' (noprec):   reduce start --> loc start
    action 'RBRACK' (noprec):   reduce start --> loc start
    action 'LBRACE' (noprec):   reduce start --> loc start
    action 'RBRACE' (noprec):   reduce start --> loc start
    action 'AMP' (noprec):   reduce start --> loc start
    action 'COMMA' (noprec):   reduce start --> loc start
    action 'AND' (noprec):   reduce start --> loc start
    action 'OR' (noprec):   reduce start --> loc start
    action 'MOD' (noprec):   reduce start --> loc start
    action 'EQ' (noprec):   reduce start --> loc start
    action 'GT' (noprec):   reduce start --> loc start
    action 'GE' (noprec):   reduce start --> loc start
    action 'LT' (noprec):   reduce start --> loc start
    action 'LE' (noprec):   reduce start --> loc start
    action 'PLUS' (noprec):   reduce start --> loc start
    action 'MINUS' (noprec):   reduce start --> loc start
    action 'TIMES' (noprec):   reduce start --> loc start
    action 'DIVIDE' (noprec):   reduce start --> loc start
    action 'ENDLOC' (noprec):   reduce start --> loc start
    action 'STARTLOC' (noprec):   reduce start --> loc start
    action 'FLOAT' (noprec):   reduce start --> loc start
    action 'INT' (noprec):   reduce start --> loc start
    action 'ID' (noprec):   reduce start --> loc start
    action 'COMMENT' (noprec):   reduce start --> loc start
    action 'TSTRING' (noprec):   reduce start --> loc start
    action 'error' (noprec):   reduce start --> loc start
    action '#' (noprec):   reduce start --> loc start
    action '$$' (noprec):   reduce start --> loc start

  immediate action:   reduce start --> loc start
 gotos:

state 10:
  items:
    parseStatements -> 'NEWLINE' . parseStatements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (explicit left 9995):   shift 10
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   shift 12
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto parseStatements: 11
    goto statements: 13
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 11:
  items:
    parseStatements -> 'NEWLINE' parseStatements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'EQP' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'EQM' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'INC' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'DECR' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'SET' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'LET' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'END' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'NEWLINE' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'COLON' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'ELSE' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'ELSEIF' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'IF' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'ACT' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'DOLLAR' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'SHARP' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'EOF' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'NO' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'OBJ' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'LPAREN' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'RPAREN' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'LBRACK' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'RBRACK' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'LBRACE' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'RBRACE' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'AMP' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'COMMA' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'AND' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'OR' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'MOD' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'EQ' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'GT' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'GE' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'LT' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'LE' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'PLUS' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'MINUS' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'TIMES' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'DIVIDE' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'ENDLOC' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'STARTLOC' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'FLOAT' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'INT' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'ID' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'COMMENT' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'TSTRING' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action 'error' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action '#' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements
    action '$$' (explicit left 9995):   reduce parseStatements --> 'NEWLINE' parseStatements

  immediate action:   reduce parseStatements --> 'NEWLINE' parseStatements
 gotos:

state 12:
  items:
    parseStatements -> 'EOF' . 

  actions:
    action 'NEQ' (noprec):   reduce parseStatements --> 'EOF'
    action 'EQP' (noprec):   reduce parseStatements --> 'EOF'
    action 'EQM' (noprec):   reduce parseStatements --> 'EOF'
    action 'INC' (noprec):   reduce parseStatements --> 'EOF'
    action 'DECR' (noprec):   reduce parseStatements --> 'EOF'
    action 'SET' (noprec):   reduce parseStatements --> 'EOF'
    action 'LET' (noprec):   reduce parseStatements --> 'EOF'
    action 'END' (noprec):   reduce parseStatements --> 'EOF'
    action 'NEWLINE' (noprec):   reduce parseStatements --> 'EOF'
    action 'COLON' (noprec):   reduce parseStatements --> 'EOF'
    action 'ELSE' (noprec):   reduce parseStatements --> 'EOF'
    action 'ELSEIF' (noprec):   reduce parseStatements --> 'EOF'
    action 'IF' (noprec):   reduce parseStatements --> 'EOF'
    action 'ACT' (noprec):   reduce parseStatements --> 'EOF'
    action 'DOLLAR' (noprec):   reduce parseStatements --> 'EOF'
    action 'SHARP' (noprec):   reduce parseStatements --> 'EOF'
    action 'EOF' (noprec):   reduce parseStatements --> 'EOF'
    action 'NO' (noprec):   reduce parseStatements --> 'EOF'
    action 'OBJ' (noprec):   reduce parseStatements --> 'EOF'
    action 'LPAREN' (noprec):   reduce parseStatements --> 'EOF'
    action 'RPAREN' (noprec):   reduce parseStatements --> 'EOF'
    action 'LBRACK' (noprec):   reduce parseStatements --> 'EOF'
    action 'RBRACK' (noprec):   reduce parseStatements --> 'EOF'
    action 'LBRACE' (noprec):   reduce parseStatements --> 'EOF'
    action 'RBRACE' (noprec):   reduce parseStatements --> 'EOF'
    action 'AMP' (noprec):   reduce parseStatements --> 'EOF'
    action 'COMMA' (noprec):   reduce parseStatements --> 'EOF'
    action 'AND' (noprec):   reduce parseStatements --> 'EOF'
    action 'OR' (noprec):   reduce parseStatements --> 'EOF'
    action 'MOD' (noprec):   reduce parseStatements --> 'EOF'
    action 'EQ' (noprec):   reduce parseStatements --> 'EOF'
    action 'GT' (noprec):   reduce parseStatements --> 'EOF'
    action 'GE' (noprec):   reduce parseStatements --> 'EOF'
    action 'LT' (noprec):   reduce parseStatements --> 'EOF'
    action 'LE' (noprec):   reduce parseStatements --> 'EOF'
    action 'PLUS' (noprec):   reduce parseStatements --> 'EOF'
    action 'MINUS' (noprec):   reduce parseStatements --> 'EOF'
    action 'TIMES' (noprec):   reduce parseStatements --> 'EOF'
    action 'DIVIDE' (noprec):   reduce parseStatements --> 'EOF'
    action 'ENDLOC' (noprec):   reduce parseStatements --> 'EOF'
    action 'STARTLOC' (noprec):   reduce parseStatements --> 'EOF'
    action 'FLOAT' (noprec):   reduce parseStatements --> 'EOF'
    action 'INT' (noprec):   reduce parseStatements --> 'EOF'
    action 'ID' (noprec):   reduce parseStatements --> 'EOF'
    action 'COMMENT' (noprec):   reduce parseStatements --> 'EOF'
    action 'TSTRING' (noprec):   reduce parseStatements --> 'EOF'
    action 'error' (noprec):   reduce parseStatements --> 'EOF'
    action '#' (noprec):   reduce parseStatements --> 'EOF'
    action '$$' (noprec):   reduce parseStatements --> 'EOF'

  immediate action:   reduce parseStatements --> 'EOF'
 gotos:

state 13:
  items:
    parseStatements -> statements . 

  actions:
    action 'NEQ' (noprec):   reduce parseStatements --> statements
    action 'EQP' (noprec):   reduce parseStatements --> statements
    action 'EQM' (noprec):   reduce parseStatements --> statements
    action 'INC' (noprec):   reduce parseStatements --> statements
    action 'DECR' (noprec):   reduce parseStatements --> statements
    action 'SET' (noprec):   reduce parseStatements --> statements
    action 'LET' (noprec):   reduce parseStatements --> statements
    action 'END' (noprec):   reduce parseStatements --> statements
    action 'NEWLINE' (noprec):   reduce parseStatements --> statements
    action 'COLON' (noprec):   reduce parseStatements --> statements
    action 'ELSE' (noprec):   reduce parseStatements --> statements
    action 'ELSEIF' (noprec):   reduce parseStatements --> statements
    action 'IF' (noprec):   reduce parseStatements --> statements
    action 'ACT' (noprec):   reduce parseStatements --> statements
    action 'DOLLAR' (noprec):   reduce parseStatements --> statements
    action 'SHARP' (noprec):   reduce parseStatements --> statements
    action 'EOF' (noprec):   reduce parseStatements --> statements
    action 'NO' (noprec):   reduce parseStatements --> statements
    action 'OBJ' (noprec):   reduce parseStatements --> statements
    action 'LPAREN' (noprec):   reduce parseStatements --> statements
    action 'RPAREN' (noprec):   reduce parseStatements --> statements
    action 'LBRACK' (noprec):   reduce parseStatements --> statements
    action 'RBRACK' (noprec):   reduce parseStatements --> statements
    action 'LBRACE' (noprec):   reduce parseStatements --> statements
    action 'RBRACE' (noprec):   reduce parseStatements --> statements
    action 'AMP' (noprec):   reduce parseStatements --> statements
    action 'COMMA' (noprec):   reduce parseStatements --> statements
    action 'AND' (noprec):   reduce parseStatements --> statements
    action 'OR' (noprec):   reduce parseStatements --> statements
    action 'MOD' (noprec):   reduce parseStatements --> statements
    action 'EQ' (noprec):   reduce parseStatements --> statements
    action 'GT' (noprec):   reduce parseStatements --> statements
    action 'GE' (noprec):   reduce parseStatements --> statements
    action 'LT' (noprec):   reduce parseStatements --> statements
    action 'LE' (noprec):   reduce parseStatements --> statements
    action 'PLUS' (noprec):   reduce parseStatements --> statements
    action 'MINUS' (noprec):   reduce parseStatements --> statements
    action 'TIMES' (noprec):   reduce parseStatements --> statements
    action 'DIVIDE' (noprec):   reduce parseStatements --> statements
    action 'ENDLOC' (noprec):   reduce parseStatements --> statements
    action 'STARTLOC' (noprec):   reduce parseStatements --> statements
    action 'FLOAT' (noprec):   reduce parseStatements --> statements
    action 'INT' (noprec):   reduce parseStatements --> statements
    action 'ID' (noprec):   reduce parseStatements --> statements
    action 'COMMENT' (noprec):   reduce parseStatements --> statements
    action 'TSTRING' (noprec):   reduce parseStatements --> statements
    action 'error' (noprec):   reduce parseStatements --> statements
    action '#' (noprec):   reduce parseStatements --> statements
    action '$$' (noprec):   reduce parseStatements --> statements

  immediate action:   reduce parseStatements --> statements
 gotos:

state 14:
  items:
    loc -> 'STARTLOC' . 'NEWLINE' statements 'ENDLOC'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 15
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 15:
  items:
    loc -> 'STARTLOC' 'NEWLINE' . statements 'ENDLOC'

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 16
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 16:
  items:
    loc -> 'STARTLOC' 'NEWLINE' statements . 'ENDLOC'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   shift 17
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 17:
  items:
    loc -> 'STARTLOC' 'NEWLINE' statements 'ENDLOC' . 

  actions:
    action 'NEQ' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'EQP' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'EQM' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'INC' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'DECR' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'SET' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'LET' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'END' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'NEWLINE' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'COLON' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'ELSE' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'ELSEIF' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'IF' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'ACT' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'DOLLAR' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'SHARP' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'EOF' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'NO' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'OBJ' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'LPAREN' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'RPAREN' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'LBRACK' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'RBRACK' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'LBRACE' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'RBRACE' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'AMP' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'COMMA' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'AND' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'OR' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'MOD' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'EQ' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'GT' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'GE' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'LT' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'LE' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'PLUS' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'MINUS' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'TIMES' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'DIVIDE' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'ENDLOC' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'STARTLOC' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'FLOAT' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'INT' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'ID' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'COMMENT' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'TSTRING' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action 'error' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action '#' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
    action '$$' (noprec):   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'

  immediate action:   reduce loc --> 'STARTLOC' 'NEWLINE' statements 'ENDLOC'
 gotos:

state 18:
  items:
    elseif -> 'ELSEIF' . expr 'COLON' 'NEWLINE' statements
    elseif -> 'ELSEIF' . expr 'COLON' 'NEWLINE' statements elseif
    elseif -> 'ELSEIF' . expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 19
    goto val_: 149

state 19:
  items:
    elseif -> 'ELSEIF' expr . 'COLON' 'NEWLINE' statements
    elseif -> 'ELSEIF' expr . 'COLON' 'NEWLINE' statements elseif
    elseif -> 'ELSEIF' expr . 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (explicit left 9999):   shift 20
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 20:
  items:
    elseif -> 'ELSEIF' expr 'COLON' . 'NEWLINE' statements
    elseif -> 'ELSEIF' expr 'COLON' . 'NEWLINE' statements elseif
    elseif -> 'ELSEIF' expr 'COLON' . 'NEWLINE' statements 'ELSE' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 21
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 21:
  items:
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' . statements
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' . statements elseif
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' . statements 'ELSE' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 22
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 22:
  items:
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' statements . 
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' statements . elseif
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' statements . 'ELSE' 'NEWLINE' statements

  actions:
    action 'NEQ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'ELSE' (noprec):   shift 24
    action 'ELSEIF' (noprec):   shift 18
    action 'IF' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements

  immediate action: <none>
 gotos:
    goto elseif: 23

state 23:
  items:
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'EQP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'EQM' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'INC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'DECR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'SET' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'LET' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'END' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'NEWLINE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'COLON' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'ELSE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'ELSEIF' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'IF' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'ACT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'DOLLAR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'SHARP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'EOF' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'NO' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'OBJ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'LPAREN' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'RPAREN' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'LBRACK' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'RBRACK' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'LBRACE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'RBRACE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'AMP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'COMMA' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'AND' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'OR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'MOD' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'EQ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'GT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'GE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'LT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'LE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'PLUS' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'MINUS' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'TIMES' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'DIVIDE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'ENDLOC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'STARTLOC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'FLOAT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'INT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'ID' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'COMMENT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'TSTRING' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action 'error' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action '#' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
    action '$$' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif

  immediate action:   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements elseif
 gotos:

state 24:
  items:
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 25
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 25:
  items:
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 26
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 26:
  items:
    elseif -> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements

  immediate action:   reduce elseif --> 'ELSEIF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements
 gotos:

state 27:
  items:
    statements -> 'error' . 

  actions:
    action 'NEQ' (noprec):   reduce statements --> 'error'
    action 'EQP' (noprec):   reduce statements --> 'error'
    action 'EQM' (noprec):   reduce statements --> 'error'
    action 'INC' (noprec):   reduce statements --> 'error'
    action 'DECR' (noprec):   reduce statements --> 'error'
    action 'SET' (noprec):   reduce statements --> 'error'
    action 'LET' (noprec):   reduce statements --> 'error'
    action 'END' (noprec):   reduce statements --> 'error'
    action 'NEWLINE' (noprec):   reduce statements --> 'error'
    action 'COLON' (noprec):   reduce statements --> 'error'
    action 'ELSE' (noprec):   reduce statements --> 'error'
    action 'ELSEIF' (noprec):   reduce statements --> 'error'
    action 'IF' (noprec):   reduce statements --> 'error'
    action 'ACT' (noprec):   reduce statements --> 'error'
    action 'DOLLAR' (noprec):   reduce statements --> 'error'
    action 'SHARP' (noprec):   reduce statements --> 'error'
    action 'EOF' (noprec):   reduce statements --> 'error'
    action 'NO' (noprec):   reduce statements --> 'error'
    action 'OBJ' (noprec):   reduce statements --> 'error'
    action 'LPAREN' (noprec):   reduce statements --> 'error'
    action 'RPAREN' (noprec):   reduce statements --> 'error'
    action 'LBRACK' (noprec):   reduce statements --> 'error'
    action 'RBRACK' (noprec):   reduce statements --> 'error'
    action 'LBRACE' (noprec):   reduce statements --> 'error'
    action 'RBRACE' (noprec):   reduce statements --> 'error'
    action 'AMP' (noprec):   reduce statements --> 'error'
    action 'COMMA' (noprec):   reduce statements --> 'error'
    action 'AND' (noprec):   reduce statements --> 'error'
    action 'OR' (noprec):   reduce statements --> 'error'
    action 'MOD' (noprec):   reduce statements --> 'error'
    action 'EQ' (noprec):   reduce statements --> 'error'
    action 'GT' (noprec):   reduce statements --> 'error'
    action 'GE' (noprec):   reduce statements --> 'error'
    action 'LT' (noprec):   reduce statements --> 'error'
    action 'LE' (noprec):   reduce statements --> 'error'
    action 'PLUS' (noprec):   reduce statements --> 'error'
    action 'MINUS' (noprec):   reduce statements --> 'error'
    action 'TIMES' (noprec):   reduce statements --> 'error'
    action 'DIVIDE' (noprec):   reduce statements --> 'error'
    action 'ENDLOC' (noprec):   reduce statements --> 'error'
    action 'STARTLOC' (noprec):   reduce statements --> 'error'
    action 'FLOAT' (noprec):   reduce statements --> 'error'
    action 'INT' (noprec):   reduce statements --> 'error'
    action 'ID' (noprec):   reduce statements --> 'error'
    action 'COMMENT' (noprec):   reduce statements --> 'error'
    action 'TSTRING' (noprec):   reduce statements --> 'error'
    action 'error' (noprec):   reduce statements --> 'error'
    action '#' (noprec):   reduce statements --> 'error'
    action '$$' (noprec):   reduce statements --> 'error'

  immediate action:   reduce statements --> 'error'
 gotos:

state 28:
  items:
    statements -> states . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 29
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 29:
  items:
    statements -> states 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 30
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 30:
  items:
    statements -> states 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> states 'NEWLINE' statements

  immediate action:   reduce statements --> states 'NEWLINE' statements
 gotos:

state 31:
  items:
    statements -> assertOp . 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    state -> assertOp . 'EQ' expr
    state -> assertOp . 'EQ' 'ID' val_
    state -> assertOp . 'EQP' expr
    state -> assertOp . 'EQM' expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   shift 130
    action 'EQM' (noprec):   shift 132
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (explicit left 9990):   shift 32
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 32:
  items:
    statements -> assertOp 'EQ' . 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    state -> assertOp 'EQ' . expr
    state -> assertOp 'EQ' . 'ID' val_

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   shift 33
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 128
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 127
    goto val_: 149

state 33:
  items:
    statements -> assertOp 'EQ' 'LBRACE' . 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 34
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 34:
  items:
    statements -> assertOp 'EQ' 'LBRACE' 'NEWLINE' . statements 'RBRACE' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 35
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 35:
  items:
    statements -> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements . 'RBRACE' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   shift 36
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 36:
  items:
    statements -> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 37
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 37:
  items:
    statements -> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 38
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 38:
  items:
    statements -> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements

  immediate action:   reduce statements --> assertOp 'EQ' 'LBRACE' 'NEWLINE' statements 'RBRACE' 'NEWLINE' statements
 gotos:

state 39:
  items:
    statements -> 'COMMENT' . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 40
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 40:
  items:
    statements -> 'COMMENT' 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 41
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 41:
  items:
    statements -> 'COMMENT' 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'COMMENT' 'NEWLINE' statements

  immediate action:   reduce statements --> 'COMMENT' 'NEWLINE' statements
 gotos:

state 42:
  items:
    statements -> 'COLON' . 'ID' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 43
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 43:
  items:
    statements -> 'COLON' 'ID' . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 44
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 44:
  items:
    statements -> 'COLON' 'ID' 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 45
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 45:
  items:
    statements -> 'COLON' 'ID' 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements

  immediate action:   reduce statements --> 'COLON' 'ID' 'NEWLINE' statements
 gotos:

state 46:
  items:
    statements -> 'ACT' . seq_ 'COLON' states 'NEWLINE' statements
    statements -> 'ACT' . seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    statements -> 'ACT' . seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    statements -> 'ACT' . seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 47
    goto expr: 146
    goto val_: 149

state 47:
  items:
    statements -> 'ACT' seq_ . 'COLON' states 'NEWLINE' statements
    statements -> 'ACT' seq_ . 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    statements -> 'ACT' seq_ . 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    statements -> 'ACT' seq_ . 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (explicit left 9999):   shift 48
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 48:
  items:
    statements -> 'ACT' seq_ 'COLON' . states 'NEWLINE' statements
    statements -> 'ACT' seq_ 'COLON' . 'IF' expr 'COLON' states 'NEWLINE' statements
    statements -> 'ACT' seq_ 'COLON' . 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    statements -> 'ACT' seq_ 'COLON' . 'NEWLINE' statements 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 64
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   shift 52
    action 'ACT' (noprec):   shift 58
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 49
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 49:
  items:
    statements -> 'ACT' seq_ 'COLON' states . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 50
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 50:
  items:
    statements -> 'ACT' seq_ 'COLON' states 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 51
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 51:
  items:
    statements -> 'ACT' seq_ 'COLON' states 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements

  immediate action:   reduce statements --> 'ACT' seq_ 'COLON' states 'NEWLINE' statements
 gotos:

state 52:
  items:
    statements -> 'ACT' seq_ 'COLON' 'IF' . expr 'COLON' states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 53
    goto val_: 149

state 53:
  items:
    statements -> 'ACT' seq_ 'COLON' 'IF' expr . 'COLON' states 'NEWLINE' statements
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (explicit left 9999):   shift 54
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 54:
  items:
    statements -> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' . states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 55
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 55:
  items:
    statements -> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 56
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 56:
  items:
    statements -> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 57
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 57:
  items:
    statements -> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements

  immediate action:   reduce statements --> 'ACT' seq_ 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
 gotos:

state 58:
  items:
    statements -> 'ACT' seq_ 'COLON' 'ACT' . seq_ 'COLON' states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 59
    goto expr: 146
    goto val_: 149

state 59:
  items:
    statements -> 'ACT' seq_ 'COLON' 'ACT' seq_ . 'COLON' states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (explicit left 9999):   shift 60
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 60:
  items:
    statements -> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' . states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 61
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 61:
  items:
    statements -> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 62
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 62:
  items:
    statements -> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 63
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 63:
  items:
    statements -> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements

  immediate action:   reduce statements --> 'ACT' seq_ 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
 gotos:

state 64:
  items:
    statements -> 'ACT' seq_ 'COLON' 'NEWLINE' . statements 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 65
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 65:
  items:
    statements -> 'ACT' seq_ 'COLON' 'NEWLINE' statements . 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   shift 66
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 66:
  items:
    statements -> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 67
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 67:
  items:
    statements -> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 68
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 68:
  items:
    statements -> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements

  immediate action:   reduce statements --> 'ACT' seq_ 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
 gotos:

state 69:
  items:
    statements -> 'IF' . expr 'COLON' states 'NEWLINE' statements
    statements -> 'IF' . expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    statements -> 'IF' . expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    statements -> 'IF' . expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    statements -> 'IF' . expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    statements -> 'IF' . expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    statements -> 'IF' . expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 70
    goto val_: 149

state 70:
  items:
    statements -> 'IF' expr . 'COLON' states 'NEWLINE' statements
    statements -> 'IF' expr . 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    statements -> 'IF' expr . 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    statements -> 'IF' expr . 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    statements -> 'IF' expr . 'COLON' states 'ELSE' states 'NEWLINE' statements
    statements -> 'IF' expr . 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    statements -> 'IF' expr . 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (explicit left 9999):   shift 71
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 71:
  items:
    statements -> 'IF' expr 'COLON' . states 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' . 'IF' expr 'COLON' states 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' . 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' . 'NEWLINE' statements 'END' 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' . states 'ELSE' states 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' . 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' . 'NEWLINE' statements elseif 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 87
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   shift 75
    action 'ACT' (noprec):   shift 81
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 72
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 72:
  items:
    statements -> 'IF' expr 'COLON' states . 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' states . 'ELSE' states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 73
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   shift 92
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 73:
  items:
    statements -> 'IF' expr 'COLON' states 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 74
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 74:
  items:
    statements -> 'IF' expr 'COLON' states 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements

  immediate action:   reduce statements --> 'IF' expr 'COLON' states 'NEWLINE' statements
 gotos:

state 75:
  items:
    statements -> 'IF' expr 'COLON' 'IF' . expr 'COLON' states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 76
    goto val_: 149

state 76:
  items:
    statements -> 'IF' expr 'COLON' 'IF' expr . 'COLON' states 'NEWLINE' statements
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (explicit left 9999):   shift 77
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 77:
  items:
    statements -> 'IF' expr 'COLON' 'IF' expr 'COLON' . states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 78
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 78:
  items:
    statements -> 'IF' expr 'COLON' 'IF' expr 'COLON' states . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 79
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 79:
  items:
    statements -> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 80
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 80:
  items:
    statements -> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements

  immediate action:   reduce statements --> 'IF' expr 'COLON' 'IF' expr 'COLON' states 'NEWLINE' statements
 gotos:

state 81:
  items:
    statements -> 'IF' expr 'COLON' 'ACT' . seq_ 'COLON' states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 82
    goto expr: 146
    goto val_: 149

state 82:
  items:
    statements -> 'IF' expr 'COLON' 'ACT' seq_ . 'COLON' states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (explicit left 9999):   shift 83
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 83:
  items:
    statements -> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' . states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 84
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 84:
  items:
    statements -> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 85
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 85:
  items:
    statements -> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 86
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 86:
  items:
    statements -> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements

  immediate action:   reduce statements --> 'IF' expr 'COLON' 'ACT' seq_ 'COLON' states 'NEWLINE' statements
 gotos:

state 87:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' . statements 'END' 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' 'NEWLINE' . statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' 'NEWLINE' . statements elseif 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 88
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 88:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements . 'END' 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements . 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements . elseif 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   shift 89
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   shift 96
    action 'ELSEIF' (noprec):   shift 18
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto elseif: 102

state 89:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'END' . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 90
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 90:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 91
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 91:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements

  immediate action:   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'END' 'NEWLINE' statements
 gotos:

state 92:
  items:
    statements -> 'IF' expr 'COLON' states 'ELSE' . states 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 93
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 93:
  items:
    statements -> 'IF' expr 'COLON' states 'ELSE' states . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 94
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 94:
  items:
    statements -> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 95
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 95:
  items:
    statements -> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements

  immediate action:   reduce statements --> 'IF' expr 'COLON' states 'ELSE' states 'NEWLINE' statements
 gotos:

state 96:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' . 'NEWLINE' statements 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 97
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 97:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' . statements 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 98
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 98:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements . 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   shift 99
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 99:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 100
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 100:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 101
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 101:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements

  immediate action:   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements 'ELSE' 'NEWLINE' statements 'END' 'NEWLINE' statements
 gotos:

state 102:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements elseif . 'END' 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   shift 103
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 103:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' . 'NEWLINE' statements

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (explicit left 9995):   shift 104
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 104:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' . statements

  actions:
    action 'NEQ' (noprec):   reduce statements --> 
    action 'EQP' (noprec):   reduce statements --> 
    action 'EQM' (noprec):   reduce statements --> 
    action 'INC' (noprec):   reduce statements --> 
    action 'DECR' (noprec):   reduce statements --> 
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   reduce statements --> 
    action 'NEWLINE' (noprec):   reduce statements --> 
    action 'COLON' (explicit left 9999):   shift 42
    action 'ELSE' (noprec):   reduce statements --> 
    action 'ELSEIF' (noprec):   reduce statements --> 
    action 'IF' (noprec):   shift 69
    action 'ACT' (noprec):   shift 46
    action 'DOLLAR' (noprec):   reduce statements --> 
    action 'SHARP' (noprec):   reduce statements --> 
    action 'EOF' (noprec):   reduce statements --> 
    action 'NO' (noprec):   reduce statements --> 
    action 'OBJ' (noprec):   reduce statements --> 
    action 'LPAREN' (noprec):   reduce statements --> 
    action 'RPAREN' (noprec):   reduce statements --> 
    action 'LBRACK' (noprec):   reduce statements --> 
    action 'RBRACK' (noprec):   reduce statements --> 
    action 'LBRACE' (noprec):   reduce statements --> 
    action 'RBRACE' (noprec):   reduce statements --> 
    action 'AMP' (noprec):   reduce statements --> 
    action 'COMMA' (noprec):   reduce statements --> 
    action 'AND' (noprec):   reduce statements --> 
    action 'OR' (noprec):   reduce statements --> 
    action 'MOD' (noprec):   reduce statements --> 
    action 'EQ' (noprec):   reduce statements --> 
    action 'GT' (noprec):   reduce statements --> 
    action 'GE' (noprec):   reduce statements --> 
    action 'LT' (noprec):   reduce statements --> 
    action 'LE' (noprec):   reduce statements --> 
    action 'PLUS' (noprec):   reduce statements --> 
    action 'MINUS' (noprec):   reduce statements --> 
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   reduce statements --> 
    action 'ENDLOC' (noprec):   reduce statements --> 
    action 'STARTLOC' (noprec):   reduce statements --> 
    action 'FLOAT' (noprec):   reduce statements --> 
    action 'INT' (noprec):   reduce statements --> 
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 39
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   shift 27
    action '#' (noprec):   reduce statements --> 
    action '$$' (noprec):   reduce statements --> 

  immediate action: <none>
 gotos:
    goto statements: 105
    goto states: 28
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 31

state 105:
  items:
    statements -> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements . 

  actions:
    action 'NEQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'EQP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'EQM' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'INC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'DECR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'SET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'LET' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'END' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'NEWLINE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'COLON' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'ELSE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'ELSEIF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'IF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'ACT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'DOLLAR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'SHARP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'EOF' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'NO' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'OBJ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'LPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'RPAREN' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'LBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'RBRACK' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'LBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'RBRACE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'AMP' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'COMMA' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'AND' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'OR' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'MOD' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'EQ' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'GT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'GE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'LT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'LE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'PLUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'MINUS' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'TIMES' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'DIVIDE' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'ENDLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'STARTLOC' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'FLOAT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'INT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'ID' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'COMMENT' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'TSTRING' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action 'error' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action '#' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
    action '$$' (explicit left 9995):   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements

  immediate action:   reduce statements --> 'IF' expr 'COLON' 'NEWLINE' statements elseif 'END' 'NEWLINE' statements
 gotos:

state 106:
  items:
    states -> state . 'AMP' 'ACT' seq_ 'COLON' states
    states -> state . 'AMP' states
    states -> state . 'AMP' 'COMMENT'
    states -> state . 

  actions:
    action 'NEQ' (noprec):   reduce states --> state
    action 'EQP' (noprec):   reduce states --> state
    action 'EQM' (noprec):   reduce states --> state
    action 'INC' (noprec):   reduce states --> state
    action 'DECR' (noprec):   reduce states --> state
    action 'SET' (noprec):   reduce states --> state
    action 'LET' (noprec):   reduce states --> state
    action 'END' (noprec):   reduce states --> state
    action 'NEWLINE' (noprec):   reduce states --> state
    action 'COLON' (noprec):   reduce states --> state
    action 'ELSE' (noprec):   reduce states --> state
    action 'ELSEIF' (noprec):   reduce states --> state
    action 'IF' (noprec):   reduce states --> state
    action 'ACT' (noprec):   reduce states --> state
    action 'DOLLAR' (noprec):   reduce states --> state
    action 'SHARP' (noprec):   reduce states --> state
    action 'EOF' (noprec):   reduce states --> state
    action 'NO' (noprec):   reduce states --> state
    action 'OBJ' (noprec):   reduce states --> state
    action 'LPAREN' (noprec):   reduce states --> state
    action 'RPAREN' (noprec):   reduce states --> state
    action 'LBRACK' (noprec):   reduce states --> state
    action 'RBRACK' (noprec):   reduce states --> state
    action 'LBRACE' (noprec):   reduce states --> state
    action 'RBRACE' (noprec):   reduce states --> state
    action 'AMP' (explicit left 10000):   shift 107
    action 'COMMA' (noprec):   reduce states --> state
    action 'AND' (noprec):   reduce states --> state
    action 'OR' (noprec):   reduce states --> state
    action 'MOD' (noprec):   reduce states --> state
    action 'EQ' (noprec):   reduce states --> state
    action 'GT' (noprec):   reduce states --> state
    action 'GE' (noprec):   reduce states --> state
    action 'LT' (noprec):   reduce states --> state
    action 'LE' (noprec):   reduce states --> state
    action 'PLUS' (noprec):   reduce states --> state
    action 'MINUS' (noprec):   reduce states --> state
    action 'TIMES' (noprec):   reduce states --> state
    action 'DIVIDE' (noprec):   reduce states --> state
    action 'ENDLOC' (noprec):   reduce states --> state
    action 'STARTLOC' (noprec):   reduce states --> state
    action 'FLOAT' (noprec):   reduce states --> state
    action 'INT' (noprec):   reduce states --> state
    action 'ID' (noprec):   reduce states --> state
    action 'COMMENT' (noprec):   reduce states --> state
    action 'TSTRING' (noprec):   reduce states --> state
    action 'error' (noprec):   reduce states --> state
    action '#' (noprec):   reduce states --> state
    action '$$' (noprec):   reduce states --> state

  immediate action: <none>
 gotos:

state 107:
  items:
    states -> state 'AMP' . 'ACT' seq_ 'COLON' states
    states -> state 'AMP' . states
    states -> state 'AMP' . 'COMMENT'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   shift 108
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   shift 113
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 112
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 108:
  items:
    states -> state 'AMP' 'ACT' . seq_ 'COLON' states

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 109
    goto expr: 146
    goto val_: 149

state 109:
  items:
    states -> state 'AMP' 'ACT' seq_ . 'COLON' states

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (explicit left 9999):   shift 110
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 110:
  items:
    states -> state 'AMP' 'ACT' seq_ 'COLON' . states

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   shift 138
    action 'LET' (noprec):   shift 140
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 124
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto states: 111
    goto id: 117
    goto temp: 134
    goto state: 106
    goto ass: 142
    goto assertOp: 125

state 111:
  items:
    states -> state 'AMP' 'ACT' seq_ 'COLON' states . 

  actions:
    action 'NEQ' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'EQP' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'EQM' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'INC' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'DECR' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'SET' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'LET' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'END' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'NEWLINE' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'COLON' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'ELSE' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'ELSEIF' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'IF' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'ACT' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'DOLLAR' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'SHARP' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'EOF' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'NO' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'OBJ' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'LPAREN' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'RPAREN' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'LBRACK' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'RBRACK' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'LBRACE' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'RBRACE' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'AMP' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'COMMA' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'AND' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'OR' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'MOD' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'EQ' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'GT' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'GE' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'LT' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'LE' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'PLUS' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'MINUS' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'TIMES' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'DIVIDE' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'ENDLOC' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'STARTLOC' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'FLOAT' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'INT' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'ID' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'COMMENT' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'TSTRING' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action 'error' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action '#' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
    action '$$' (explicit left 9999):   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states

  immediate action:   reduce states --> state 'AMP' 'ACT' seq_ 'COLON' states
 gotos:

state 112:
  items:
    states -> state 'AMP' states . 

  actions:
    action 'NEQ' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'EQP' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'EQM' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'INC' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'DECR' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'SET' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'LET' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'END' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'NEWLINE' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'COLON' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'ELSE' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'ELSEIF' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'IF' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'ACT' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'DOLLAR' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'SHARP' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'EOF' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'NO' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'OBJ' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'LPAREN' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'RPAREN' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'LBRACK' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'RBRACK' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'LBRACE' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'RBRACE' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'AMP' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'COMMA' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'AND' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'OR' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'MOD' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'EQ' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'GT' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'GE' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'LT' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'LE' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'PLUS' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'MINUS' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'TIMES' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'DIVIDE' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'ENDLOC' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'STARTLOC' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'FLOAT' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'INT' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'ID' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'COMMENT' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'TSTRING' (explicit left 10000):   reduce states --> state 'AMP' states
    action 'error' (explicit left 10000):   reduce states --> state 'AMP' states
    action '#' (explicit left 10000):   reduce states --> state 'AMP' states
    action '$$' (explicit left 10000):   reduce states --> state 'AMP' states

  immediate action:   reduce states --> state 'AMP' states
 gotos:

state 113:
  items:
    states -> state 'AMP' 'COMMENT' . 

  actions:
    action 'NEQ' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'EQP' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'EQM' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'INC' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'DECR' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'SET' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'LET' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'END' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'NEWLINE' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'COLON' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'ELSE' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'ELSEIF' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'IF' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'ACT' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'DOLLAR' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'SHARP' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'EOF' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'NO' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'OBJ' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'LPAREN' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'RPAREN' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'LBRACK' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'RBRACK' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'LBRACE' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'RBRACE' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'AMP' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'COMMA' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'AND' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'OR' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'MOD' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'EQ' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'GT' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'GE' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'LT' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'LE' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'PLUS' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'MINUS' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'TIMES' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'DIVIDE' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'ENDLOC' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'STARTLOC' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'FLOAT' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'INT' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'ID' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'COMMENT' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'TSTRING' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action 'error' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action '#' (noprec):   reduce states --> state 'AMP' 'COMMENT'
    action '$$' (noprec):   reduce states --> state 'AMP' 'COMMENT'

  immediate action:   reduce states --> state 'AMP' 'COMMENT'
 gotos:

state 114:
  items:
    id -> 'ID' . 

  actions:
    action 'NEQ' (noprec):   reduce id --> 'ID'
    action 'EQP' (noprec):   reduce id --> 'ID'
    action 'EQM' (noprec):   reduce id --> 'ID'
    action 'INC' (noprec):   reduce id --> 'ID'
    action 'DECR' (noprec):   reduce id --> 'ID'
    action 'SET' (noprec):   reduce id --> 'ID'
    action 'LET' (noprec):   reduce id --> 'ID'
    action 'END' (noprec):   reduce id --> 'ID'
    action 'NEWLINE' (noprec):   reduce id --> 'ID'
    action 'COLON' (noprec):   reduce id --> 'ID'
    action 'ELSE' (noprec):   reduce id --> 'ID'
    action 'ELSEIF' (noprec):   reduce id --> 'ID'
    action 'IF' (noprec):   reduce id --> 'ID'
    action 'ACT' (noprec):   reduce id --> 'ID'
    action 'DOLLAR' (noprec):   reduce id --> 'ID'
    action 'SHARP' (noprec):   reduce id --> 'ID'
    action 'EOF' (noprec):   reduce id --> 'ID'
    action 'NO' (noprec):   reduce id --> 'ID'
    action 'OBJ' (noprec):   reduce id --> 'ID'
    action 'LPAREN' (noprec):   reduce id --> 'ID'
    action 'RPAREN' (noprec):   reduce id --> 'ID'
    action 'LBRACK' (noprec):   reduce id --> 'ID'
    action 'RBRACK' (noprec):   reduce id --> 'ID'
    action 'LBRACE' (noprec):   reduce id --> 'ID'
    action 'RBRACE' (noprec):   reduce id --> 'ID'
    action 'AMP' (noprec):   reduce id --> 'ID'
    action 'COMMA' (noprec):   reduce id --> 'ID'
    action 'AND' (noprec):   reduce id --> 'ID'
    action 'OR' (noprec):   reduce id --> 'ID'
    action 'MOD' (noprec):   reduce id --> 'ID'
    action 'EQ' (noprec):   reduce id --> 'ID'
    action 'GT' (noprec):   reduce id --> 'ID'
    action 'GE' (noprec):   reduce id --> 'ID'
    action 'LT' (noprec):   reduce id --> 'ID'
    action 'LE' (noprec):   reduce id --> 'ID'
    action 'PLUS' (noprec):   reduce id --> 'ID'
    action 'MINUS' (noprec):   reduce id --> 'ID'
    action 'TIMES' (noprec):   reduce id --> 'ID'
    action 'DIVIDE' (noprec):   reduce id --> 'ID'
    action 'ENDLOC' (noprec):   reduce id --> 'ID'
    action 'STARTLOC' (noprec):   reduce id --> 'ID'
    action 'FLOAT' (noprec):   reduce id --> 'ID'
    action 'INT' (noprec):   reduce id --> 'ID'
    action 'ID' (noprec):   reduce id --> 'ID'
    action 'COMMENT' (noprec):   reduce id --> 'ID'
    action 'TSTRING' (noprec):   reduce id --> 'ID'
    action 'error' (noprec):   reduce id --> 'ID'
    action '#' (noprec):   reduce id --> 'ID'
    action '$$' (noprec):   reduce id --> 'ID'

  immediate action:   reduce id --> 'ID'
 gotos:

state 115:
  items:
    id -> 'TIMES' . 'ID'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 116
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 116:
  items:
    id -> 'TIMES' 'ID' . 

  actions:
    action 'NEQ' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'EQP' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'EQM' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'INC' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'DECR' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'SET' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'LET' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'END' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'NEWLINE' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'COLON' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'ELSE' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'ELSEIF' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'IF' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'ACT' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'DOLLAR' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'SHARP' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'EOF' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'NO' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'OBJ' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'LPAREN' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'RPAREN' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'LBRACK' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'RBRACK' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'LBRACE' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'RBRACE' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'AMP' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'COMMA' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'AND' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'OR' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'MOD' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'EQ' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'GT' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'GE' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'LT' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'LE' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'PLUS' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'MINUS' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'TIMES' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'DIVIDE' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'ENDLOC' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'STARTLOC' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'FLOAT' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'INT' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'ID' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'COMMENT' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'TSTRING' (noprec):   reduce id --> 'TIMES' 'ID'
    action 'error' (noprec):   reduce id --> 'TIMES' 'ID'
    action '#' (noprec):   reduce id --> 'TIMES' 'ID'
    action '$$' (noprec):   reduce id --> 'TIMES' 'ID'

  immediate action:   reduce id --> 'TIMES' 'ID'
 gotos:

state 117:
  items:
    temp -> id . 
    temp -> id . 'LPAREN' 'RPAREN'
    temp -> id . 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    state -> id . seq_
    ass -> id . 

  actions:
    action 'NEQ' (noprec):   reduce temp --> id
    action 'EQP' (noprec):   reduce ass --> id
    action 'EQM' (noprec):   reduce ass --> id
    action 'INC' (noprec):   reduce temp --> id
    action 'DECR' (noprec):   reduce temp --> id
    action 'SET' (noprec):   reduce temp --> id
    action 'LET' (noprec):   reduce temp --> id
    action 'END' (noprec):   reduce temp --> id
    action 'NEWLINE' (noprec):   reduce temp --> id
    action 'COLON' (noprec):   reduce temp --> id
    action 'ELSE' (noprec):   reduce temp --> id
    action 'ELSEIF' (noprec):   reduce temp --> id
    action 'IF' (noprec):   reduce temp --> id
    action 'ACT' (noprec):   reduce temp --> id
    action 'DOLLAR' (noprec):   reduce temp --> id
    action 'SHARP' (noprec):   reduce temp --> id
    action 'EOF' (noprec):   reduce temp --> id
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 118
    action 'RPAREN' (noprec):   reduce temp --> id
    action 'LBRACK' (noprec):   reduce ass --> id
    action 'RBRACK' (noprec):   reduce temp --> id
    action 'LBRACE' (noprec):   reduce temp --> id
    action 'RBRACE' (noprec):   reduce temp --> id
    action 'AMP' (noprec):   reduce temp --> id
    action 'COMMA' (noprec):   reduce temp --> id
    action 'AND' (noprec):   reduce temp --> id
    action 'OR' (noprec):   reduce temp --> id
    action 'MOD' (noprec):   reduce temp --> id
    action 'EQ' (noprec):   reduce ass --> id
    action 'GT' (noprec):   reduce temp --> id
    action 'GE' (noprec):   reduce temp --> id
    action 'LT' (noprec):   reduce temp --> id
    action 'LE' (noprec):   reduce temp --> id
    action 'PLUS' (noprec):   reduce temp --> id
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   reduce temp --> id
    action 'DIVIDE' (noprec):   reduce temp --> id
    action 'ENDLOC' (noprec):   reduce temp --> id
    action 'STARTLOC' (noprec):   reduce temp --> id
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   reduce temp --> id
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   reduce temp --> id
    action '#' (noprec):   reduce temp --> id
    action '$$' (noprec):   reduce temp --> id

  immediate action: <none>
 gotos:
    goto seq_: 137
    goto expr: 146
    goto val_: 149

state 118:
  items:
    temp -> id 'LPAREN' . 'RPAREN'
    temp -> id 'LPAREN' . expr 'COMMA' seq_ 'RPAREN'
    expr -> 'LPAREN' . expr 'RPAREN'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (explicit nonassoc 9996):   shift 119
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 120
    goto val_: 149

state 119:
  items:
    temp -> id 'LPAREN' 'RPAREN' . 

  actions:
    action 'NEQ' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'EQP' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'EQM' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'INC' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'DECR' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'SET' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'LET' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'END' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'NEWLINE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'COLON' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'ELSE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'ELSEIF' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'IF' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'ACT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'DOLLAR' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'SHARP' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'EOF' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'NO' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'OBJ' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'LPAREN' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'RPAREN' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'LBRACK' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'RBRACK' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'LBRACE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'RBRACE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'AMP' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'COMMA' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'AND' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'OR' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'MOD' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'EQ' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'GT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'GE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'LT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'LE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'PLUS' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'MINUS' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'TIMES' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'DIVIDE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'ENDLOC' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'STARTLOC' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'FLOAT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'INT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'ID' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'COMMENT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'TSTRING' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action 'error' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action '#' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'
    action '$$' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' 'RPAREN'

  immediate action:   reduce temp --> id 'LPAREN' 'RPAREN'
 gotos:

state 120:
  items:
    temp -> id 'LPAREN' expr . 'COMMA' seq_ 'RPAREN'
    expr -> 'LPAREN' expr . 'RPAREN'
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (explicit nonassoc 9996):   shift 164
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (explicit left 9998):   shift 121
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 121:
  items:
    temp -> id 'LPAREN' expr 'COMMA' . seq_ 'RPAREN'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 122
    goto expr: 146
    goto val_: 149

state 122:
  items:
    temp -> id 'LPAREN' expr 'COMMA' seq_ . 'RPAREN'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (explicit nonassoc 9996):   shift 123
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 123:
  items:
    temp -> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN' . 

  actions:
    action 'NEQ' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'EQP' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'EQM' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'INC' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'DECR' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'SET' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'LET' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'END' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'NEWLINE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'COLON' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'ELSE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'ELSEIF' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'IF' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'ACT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'DOLLAR' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'SHARP' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'EOF' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'NO' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'OBJ' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'LPAREN' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'RPAREN' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'LBRACK' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'RBRACK' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'LBRACE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'RBRACE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'AMP' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'COMMA' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'AND' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'OR' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'MOD' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'EQ' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'GT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'GE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'LT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'LE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'PLUS' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'MINUS' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'TIMES' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'DIVIDE' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'ENDLOC' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'STARTLOC' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'FLOAT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'INT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'ID' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'COMMENT' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'TSTRING' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action 'error' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action '#' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
    action '$$' (explicit nonassoc 9996):   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'

  immediate action:   reduce temp --> id 'LPAREN' expr 'COMMA' seq_ 'RPAREN'
 gotos:

state 124:
  items:
    temp -> 'TSTRING' . 

  actions:
    action 'NEQ' (noprec):   reduce temp --> 'TSTRING'
    action 'EQP' (noprec):   reduce temp --> 'TSTRING'
    action 'EQM' (noprec):   reduce temp --> 'TSTRING'
    action 'INC' (noprec):   reduce temp --> 'TSTRING'
    action 'DECR' (noprec):   reduce temp --> 'TSTRING'
    action 'SET' (noprec):   reduce temp --> 'TSTRING'
    action 'LET' (noprec):   reduce temp --> 'TSTRING'
    action 'END' (noprec):   reduce temp --> 'TSTRING'
    action 'NEWLINE' (noprec):   reduce temp --> 'TSTRING'
    action 'COLON' (noprec):   reduce temp --> 'TSTRING'
    action 'ELSE' (noprec):   reduce temp --> 'TSTRING'
    action 'ELSEIF' (noprec):   reduce temp --> 'TSTRING'
    action 'IF' (noprec):   reduce temp --> 'TSTRING'
    action 'ACT' (noprec):   reduce temp --> 'TSTRING'
    action 'DOLLAR' (noprec):   reduce temp --> 'TSTRING'
    action 'SHARP' (noprec):   reduce temp --> 'TSTRING'
    action 'EOF' (noprec):   reduce temp --> 'TSTRING'
    action 'NO' (noprec):   reduce temp --> 'TSTRING'
    action 'OBJ' (noprec):   reduce temp --> 'TSTRING'
    action 'LPAREN' (noprec):   reduce temp --> 'TSTRING'
    action 'RPAREN' (noprec):   reduce temp --> 'TSTRING'
    action 'LBRACK' (noprec):   reduce temp --> 'TSTRING'
    action 'RBRACK' (noprec):   reduce temp --> 'TSTRING'
    action 'LBRACE' (noprec):   reduce temp --> 'TSTRING'
    action 'RBRACE' (noprec):   reduce temp --> 'TSTRING'
    action 'AMP' (noprec):   reduce temp --> 'TSTRING'
    action 'COMMA' (noprec):   reduce temp --> 'TSTRING'
    action 'AND' (noprec):   reduce temp --> 'TSTRING'
    action 'OR' (noprec):   reduce temp --> 'TSTRING'
    action 'MOD' (noprec):   reduce temp --> 'TSTRING'
    action 'EQ' (noprec):   reduce temp --> 'TSTRING'
    action 'GT' (noprec):   reduce temp --> 'TSTRING'
    action 'GE' (noprec):   reduce temp --> 'TSTRING'
    action 'LT' (noprec):   reduce temp --> 'TSTRING'
    action 'LE' (noprec):   reduce temp --> 'TSTRING'
    action 'PLUS' (noprec):   reduce temp --> 'TSTRING'
    action 'MINUS' (noprec):   reduce temp --> 'TSTRING'
    action 'TIMES' (noprec):   reduce temp --> 'TSTRING'
    action 'DIVIDE' (noprec):   reduce temp --> 'TSTRING'
    action 'ENDLOC' (noprec):   reduce temp --> 'TSTRING'
    action 'STARTLOC' (noprec):   reduce temp --> 'TSTRING'
    action 'FLOAT' (noprec):   reduce temp --> 'TSTRING'
    action 'INT' (noprec):   reduce temp --> 'TSTRING'
    action 'ID' (noprec):   reduce temp --> 'TSTRING'
    action 'COMMENT' (noprec):   reduce temp --> 'TSTRING'
    action 'TSTRING' (noprec):   reduce temp --> 'TSTRING'
    action 'error' (noprec):   reduce temp --> 'TSTRING'
    action '#' (noprec):   reduce temp --> 'TSTRING'
    action '$$' (noprec):   reduce temp --> 'TSTRING'

  immediate action:   reduce temp --> 'TSTRING'
 gotos:

state 125:
  items:
    state -> assertOp . 'EQ' expr
    state -> assertOp . 'EQ' 'ID' val_
    state -> assertOp . 'EQP' expr
    state -> assertOp . 'EQM' expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   shift 130
    action 'EQM' (noprec):   shift 132
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (explicit left 9990):   shift 126
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 126:
  items:
    state -> assertOp 'EQ' . expr
    state -> assertOp 'EQ' . 'ID' val_

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 128
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 127
    goto val_: 149

state 127:
  items:
    state -> assertOp 'EQ' expr . 
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'EQM' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'INC' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'DECR' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'SET' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'LET' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'END' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'NEWLINE' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'COLON' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'ELSE' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'ELSEIF' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'IF' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'ACT' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'DOLLAR' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'SHARP' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'EOF' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'NO' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'OBJ' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'LPAREN' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'RPAREN' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'LBRACK' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'RBRACK' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'LBRACE' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'RBRACE' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'AMP' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'COMMA' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'STARTLOC' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'FLOAT' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'INT' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'ID' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'COMMENT' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'TSTRING' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action 'error' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action '#' (explicit left 9990):   reduce state --> assertOp 'EQ' expr
    action '$$' (explicit left 9990):   reduce state --> assertOp 'EQ' expr

  immediate action: <none>
 gotos:

state 128:
  items:
    state -> assertOp 'EQ' 'ID' . val_
    expr -> 'ID' . 
    expr -> 'ID' . 'LPAREN' 'RPAREN'
    expr -> 'ID' . 'LPAREN' seq_ 'RPAREN'
    expr -> 'ID' . 'LBRACK' seq_ 'RBRACK'

  actions:
    action 'NEQ' (noprec):   reduce expr --> 'ID'
    action 'EQP' (noprec):   reduce expr --> 'ID'
    action 'EQM' (noprec):   reduce expr --> 'ID'
    action 'INC' (noprec):   reduce expr --> 'ID'
    action 'DECR' (noprec):   reduce expr --> 'ID'
    action 'SET' (noprec):   reduce expr --> 'ID'
    action 'LET' (noprec):   reduce expr --> 'ID'
    action 'END' (noprec):   reduce expr --> 'ID'
    action 'NEWLINE' (noprec):   reduce expr --> 'ID'
    action 'COLON' (noprec):   reduce expr --> 'ID'
    action 'ELSE' (noprec):   reduce expr --> 'ID'
    action 'ELSEIF' (noprec):   reduce expr --> 'ID'
    action 'IF' (noprec):   reduce expr --> 'ID'
    action 'ACT' (noprec):   reduce expr --> 'ID'
    action 'DOLLAR' (noprec):   reduce expr --> 'ID'
    action 'SHARP' (noprec):   reduce expr --> 'ID'
    action 'EOF' (noprec):   reduce expr --> 'ID'
    action 'NO' (noprec):   reduce expr --> 'ID'
    action 'OBJ' (noprec):   reduce expr --> 'ID'
    action 'LPAREN' (explicit nonassoc 9997):   shift 151
    action 'RPAREN' (noprec):   reduce expr --> 'ID'
    action 'LBRACK' (noprec):   shift 155
    action 'RBRACK' (noprec):   reduce expr --> 'ID'
    action 'LBRACE' (noprec):   reduce expr --> 'ID'
    action 'RBRACE' (noprec):   reduce expr --> 'ID'
    action 'AMP' (noprec):   reduce expr --> 'ID'
    action 'COMMA' (noprec):   reduce expr --> 'ID'
    action 'AND' (noprec):   reduce expr --> 'ID'
    action 'OR' (noprec):   reduce expr --> 'ID'
    action 'MOD' (noprec):   reduce expr --> 'ID'
    action 'EQ' (noprec):   reduce expr --> 'ID'
    action 'GT' (noprec):   reduce expr --> 'ID'
    action 'GE' (noprec):   reduce expr --> 'ID'
    action 'LT' (noprec):   reduce expr --> 'ID'
    action 'LE' (noprec):   reduce expr --> 'ID'
    action 'PLUS' (noprec):   reduce expr --> 'ID'
    action 'MINUS' (noprec):   reduce expr --> 'ID'
    action 'TIMES' (noprec):   reduce expr --> 'ID'
    action 'DIVIDE' (noprec):   reduce expr --> 'ID'
    action 'ENDLOC' (noprec):   reduce expr --> 'ID'
    action 'STARTLOC' (noprec):   reduce expr --> 'ID'
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   reduce expr --> 'ID'
    action 'COMMENT' (noprec):   reduce expr --> 'ID'
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   reduce expr --> 'ID'
    action '#' (noprec):   reduce expr --> 'ID'
    action '$$' (noprec):   reduce expr --> 'ID'

  immediate action: <none>
 gotos:
    goto val_: 129

state 129:
  items:
    state -> assertOp 'EQ' 'ID' val_ . 

  actions:
    action 'NEQ' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'EQP' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'EQM' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'INC' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'DECR' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'SET' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'LET' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'END' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'NEWLINE' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'COLON' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'ELSE' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'ELSEIF' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'IF' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'ACT' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'DOLLAR' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'SHARP' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'EOF' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'NO' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'OBJ' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'LPAREN' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'RPAREN' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'LBRACK' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'RBRACK' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'LBRACE' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'RBRACE' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'AMP' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'COMMA' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'AND' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'OR' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'MOD' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'EQ' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'GT' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'GE' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'LT' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'LE' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'PLUS' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'MINUS' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'TIMES' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'DIVIDE' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'ENDLOC' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'STARTLOC' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'FLOAT' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'INT' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'ID' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'COMMENT' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'TSTRING' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action 'error' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action '#' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_
    action '$$' (noprec):   reduce state --> assertOp 'EQ' 'ID' val_

  immediate action:   reduce state --> assertOp 'EQ' 'ID' val_
 gotos:

state 130:
  items:
    state -> assertOp 'EQP' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 131
    goto val_: 149

state 131:
  items:
    state -> assertOp 'EQP' expr . 
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'EQM' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'INC' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'DECR' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'SET' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'LET' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'END' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'NEWLINE' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'COLON' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'ELSE' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'ELSEIF' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'IF' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'ACT' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'DOLLAR' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'SHARP' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'EOF' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'NO' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'OBJ' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'LPAREN' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'RPAREN' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'LBRACK' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'RBRACK' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'LBRACE' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'RBRACE' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'AMP' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'COMMA' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'STARTLOC' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'FLOAT' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'INT' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'ID' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'COMMENT' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'TSTRING' (noprec):   reduce state --> assertOp 'EQP' expr
    action 'error' (noprec):   reduce state --> assertOp 'EQP' expr
    action '#' (noprec):   reduce state --> assertOp 'EQP' expr
    action '$$' (noprec):   reduce state --> assertOp 'EQP' expr

  immediate action: <none>
 gotos:

state 132:
  items:
    state -> assertOp 'EQM' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 133
    goto val_: 149

state 133:
  items:
    state -> assertOp 'EQM' expr . 
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'EQM' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'INC' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'DECR' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'SET' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'LET' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'END' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'NEWLINE' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'COLON' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'ELSE' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'ELSEIF' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'IF' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'ACT' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'DOLLAR' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'SHARP' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'EOF' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'NO' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'OBJ' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'LPAREN' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'RPAREN' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'LBRACK' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'RBRACK' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'LBRACE' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'RBRACE' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'AMP' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'COMMA' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'STARTLOC' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'FLOAT' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'INT' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'ID' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'COMMENT' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'TSTRING' (noprec):   reduce state --> assertOp 'EQM' expr
    action 'error' (noprec):   reduce state --> assertOp 'EQM' expr
    action '#' (noprec):   reduce state --> assertOp 'EQM' expr
    action '$$' (noprec):   reduce state --> assertOp 'EQM' expr

  immediate action: <none>
 gotos:

state 134:
  items:
    state -> temp . 
    state -> temp . 'PLUS' expr

  actions:
    action 'NEQ' (noprec):   reduce state --> temp
    action 'EQP' (noprec):   reduce state --> temp
    action 'EQM' (noprec):   reduce state --> temp
    action 'INC' (noprec):   reduce state --> temp
    action 'DECR' (noprec):   reduce state --> temp
    action 'SET' (noprec):   reduce state --> temp
    action 'LET' (noprec):   reduce state --> temp
    action 'END' (noprec):   reduce state --> temp
    action 'NEWLINE' (noprec):   reduce state --> temp
    action 'COLON' (noprec):   reduce state --> temp
    action 'ELSE' (noprec):   reduce state --> temp
    action 'ELSEIF' (noprec):   reduce state --> temp
    action 'IF' (noprec):   reduce state --> temp
    action 'ACT' (noprec):   reduce state --> temp
    action 'DOLLAR' (noprec):   reduce state --> temp
    action 'SHARP' (noprec):   reduce state --> temp
    action 'EOF' (noprec):   reduce state --> temp
    action 'NO' (noprec):   reduce state --> temp
    action 'OBJ' (noprec):   reduce state --> temp
    action 'LPAREN' (noprec):   reduce state --> temp
    action 'RPAREN' (noprec):   reduce state --> temp
    action 'LBRACK' (noprec):   reduce state --> temp
    action 'RBRACK' (noprec):   reduce state --> temp
    action 'LBRACE' (noprec):   reduce state --> temp
    action 'RBRACE' (noprec):   reduce state --> temp
    action 'AMP' (noprec):   reduce state --> temp
    action 'COMMA' (noprec):   reduce state --> temp
    action 'AND' (noprec):   reduce state --> temp
    action 'OR' (noprec):   reduce state --> temp
    action 'MOD' (noprec):   reduce state --> temp
    action 'EQ' (noprec):   reduce state --> temp
    action 'GT' (noprec):   reduce state --> temp
    action 'GE' (noprec):   reduce state --> temp
    action 'LT' (noprec):   reduce state --> temp
    action 'LE' (noprec):   reduce state --> temp
    action 'PLUS' (explicit left 9992):   shift 135
    action 'MINUS' (noprec):   reduce state --> temp
    action 'TIMES' (noprec):   reduce state --> temp
    action 'DIVIDE' (noprec):   reduce state --> temp
    action 'ENDLOC' (noprec):   reduce state --> temp
    action 'STARTLOC' (noprec):   reduce state --> temp
    action 'FLOAT' (noprec):   reduce state --> temp
    action 'INT' (noprec):   reduce state --> temp
    action 'ID' (noprec):   reduce state --> temp
    action 'COMMENT' (noprec):   reduce state --> temp
    action 'TSTRING' (noprec):   reduce state --> temp
    action 'error' (noprec):   reduce state --> temp
    action '#' (noprec):   reduce state --> temp
    action '$$' (noprec):   reduce state --> temp

  immediate action: <none>
 gotos:

state 135:
  items:
    state -> temp 'PLUS' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 136
    goto val_: 149

state 136:
  items:
    state -> temp 'PLUS' expr . 
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'EQM' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'INC' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'DECR' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'SET' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'LET' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'END' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'NEWLINE' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'COLON' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'ELSE' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'ELSEIF' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'IF' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'ACT' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'DOLLAR' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'SHARP' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'EOF' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'NO' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'OBJ' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'LPAREN' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'RPAREN' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'LBRACK' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'RBRACK' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'LBRACE' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'RBRACE' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'AMP' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'COMMA' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'STARTLOC' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'FLOAT' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'INT' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'ID' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'COMMENT' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'TSTRING' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action 'error' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action '#' (explicit left 9992):   reduce state --> temp 'PLUS' expr
    action '$$' (explicit left 9992):   reduce state --> temp 'PLUS' expr

  immediate action: <none>
 gotos:

state 137:
  items:
    state -> id seq_ . 

  actions:
    action 'NEQ' (noprec):   reduce state --> id seq_
    action 'EQP' (noprec):   reduce state --> id seq_
    action 'EQM' (noprec):   reduce state --> id seq_
    action 'INC' (noprec):   reduce state --> id seq_
    action 'DECR' (noprec):   reduce state --> id seq_
    action 'SET' (noprec):   reduce state --> id seq_
    action 'LET' (noprec):   reduce state --> id seq_
    action 'END' (noprec):   reduce state --> id seq_
    action 'NEWLINE' (noprec):   reduce state --> id seq_
    action 'COLON' (noprec):   reduce state --> id seq_
    action 'ELSE' (noprec):   reduce state --> id seq_
    action 'ELSEIF' (noprec):   reduce state --> id seq_
    action 'IF' (noprec):   reduce state --> id seq_
    action 'ACT' (noprec):   reduce state --> id seq_
    action 'DOLLAR' (noprec):   reduce state --> id seq_
    action 'SHARP' (noprec):   reduce state --> id seq_
    action 'EOF' (noprec):   reduce state --> id seq_
    action 'NO' (noprec):   reduce state --> id seq_
    action 'OBJ' (noprec):   reduce state --> id seq_
    action 'LPAREN' (noprec):   reduce state --> id seq_
    action 'RPAREN' (noprec):   reduce state --> id seq_
    action 'LBRACK' (noprec):   reduce state --> id seq_
    action 'RBRACK' (noprec):   reduce state --> id seq_
    action 'LBRACE' (noprec):   reduce state --> id seq_
    action 'RBRACE' (noprec):   reduce state --> id seq_
    action 'AMP' (noprec):   reduce state --> id seq_
    action 'COMMA' (noprec):   reduce state --> id seq_
    action 'AND' (noprec):   reduce state --> id seq_
    action 'OR' (noprec):   reduce state --> id seq_
    action 'MOD' (noprec):   reduce state --> id seq_
    action 'EQ' (noprec):   reduce state --> id seq_
    action 'GT' (noprec):   reduce state --> id seq_
    action 'GE' (noprec):   reduce state --> id seq_
    action 'LT' (noprec):   reduce state --> id seq_
    action 'LE' (noprec):   reduce state --> id seq_
    action 'PLUS' (noprec):   reduce state --> id seq_
    action 'MINUS' (noprec):   reduce state --> id seq_
    action 'TIMES' (noprec):   reduce state --> id seq_
    action 'DIVIDE' (noprec):   reduce state --> id seq_
    action 'ENDLOC' (noprec):   reduce state --> id seq_
    action 'STARTLOC' (noprec):   reduce state --> id seq_
    action 'FLOAT' (noprec):   reduce state --> id seq_
    action 'INT' (noprec):   reduce state --> id seq_
    action 'ID' (noprec):   reduce state --> id seq_
    action 'COMMENT' (noprec):   reduce state --> id seq_
    action 'TSTRING' (noprec):   reduce state --> id seq_
    action 'error' (noprec):   reduce state --> id seq_
    action '#' (noprec):   reduce state --> id seq_
    action '$$' (noprec):   reduce state --> id seq_

  immediate action:   reduce state --> id seq_
 gotos:

state 138:
  items:
    ass -> 'SET' . id

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto id: 139

state 139:
  items:
    ass -> 'SET' id . 

  actions:
    action 'NEQ' (noprec):   reduce ass --> 'SET' id
    action 'EQP' (noprec):   reduce ass --> 'SET' id
    action 'EQM' (noprec):   reduce ass --> 'SET' id
    action 'INC' (noprec):   reduce ass --> 'SET' id
    action 'DECR' (noprec):   reduce ass --> 'SET' id
    action 'SET' (noprec):   reduce ass --> 'SET' id
    action 'LET' (noprec):   reduce ass --> 'SET' id
    action 'END' (noprec):   reduce ass --> 'SET' id
    action 'NEWLINE' (noprec):   reduce ass --> 'SET' id
    action 'COLON' (noprec):   reduce ass --> 'SET' id
    action 'ELSE' (noprec):   reduce ass --> 'SET' id
    action 'ELSEIF' (noprec):   reduce ass --> 'SET' id
    action 'IF' (noprec):   reduce ass --> 'SET' id
    action 'ACT' (noprec):   reduce ass --> 'SET' id
    action 'DOLLAR' (noprec):   reduce ass --> 'SET' id
    action 'SHARP' (noprec):   reduce ass --> 'SET' id
    action 'EOF' (noprec):   reduce ass --> 'SET' id
    action 'NO' (noprec):   reduce ass --> 'SET' id
    action 'OBJ' (noprec):   reduce ass --> 'SET' id
    action 'LPAREN' (noprec):   reduce ass --> 'SET' id
    action 'RPAREN' (noprec):   reduce ass --> 'SET' id
    action 'LBRACK' (noprec):   reduce ass --> 'SET' id
    action 'RBRACK' (noprec):   reduce ass --> 'SET' id
    action 'LBRACE' (noprec):   reduce ass --> 'SET' id
    action 'RBRACE' (noprec):   reduce ass --> 'SET' id
    action 'AMP' (noprec):   reduce ass --> 'SET' id
    action 'COMMA' (noprec):   reduce ass --> 'SET' id
    action 'AND' (noprec):   reduce ass --> 'SET' id
    action 'OR' (noprec):   reduce ass --> 'SET' id
    action 'MOD' (noprec):   reduce ass --> 'SET' id
    action 'EQ' (noprec):   reduce ass --> 'SET' id
    action 'GT' (noprec):   reduce ass --> 'SET' id
    action 'GE' (noprec):   reduce ass --> 'SET' id
    action 'LT' (noprec):   reduce ass --> 'SET' id
    action 'LE' (noprec):   reduce ass --> 'SET' id
    action 'PLUS' (noprec):   reduce ass --> 'SET' id
    action 'MINUS' (noprec):   reduce ass --> 'SET' id
    action 'TIMES' (noprec):   reduce ass --> 'SET' id
    action 'DIVIDE' (noprec):   reduce ass --> 'SET' id
    action 'ENDLOC' (noprec):   reduce ass --> 'SET' id
    action 'STARTLOC' (noprec):   reduce ass --> 'SET' id
    action 'FLOAT' (noprec):   reduce ass --> 'SET' id
    action 'INT' (noprec):   reduce ass --> 'SET' id
    action 'ID' (noprec):   reduce ass --> 'SET' id
    action 'COMMENT' (noprec):   reduce ass --> 'SET' id
    action 'TSTRING' (noprec):   reduce ass --> 'SET' id
    action 'error' (noprec):   reduce ass --> 'SET' id
    action '#' (noprec):   reduce ass --> 'SET' id
    action '$$' (noprec):   reduce ass --> 'SET' id

  immediate action:   reduce ass --> 'SET' id
 gotos:

state 140:
  items:
    ass -> 'LET' . id

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (explicit left 9994):   shift 115
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 114
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto id: 141

state 141:
  items:
    ass -> 'LET' id . 

  actions:
    action 'NEQ' (noprec):   reduce ass --> 'LET' id
    action 'EQP' (noprec):   reduce ass --> 'LET' id
    action 'EQM' (noprec):   reduce ass --> 'LET' id
    action 'INC' (noprec):   reduce ass --> 'LET' id
    action 'DECR' (noprec):   reduce ass --> 'LET' id
    action 'SET' (noprec):   reduce ass --> 'LET' id
    action 'LET' (noprec):   reduce ass --> 'LET' id
    action 'END' (noprec):   reduce ass --> 'LET' id
    action 'NEWLINE' (noprec):   reduce ass --> 'LET' id
    action 'COLON' (noprec):   reduce ass --> 'LET' id
    action 'ELSE' (noprec):   reduce ass --> 'LET' id
    action 'ELSEIF' (noprec):   reduce ass --> 'LET' id
    action 'IF' (noprec):   reduce ass --> 'LET' id
    action 'ACT' (noprec):   reduce ass --> 'LET' id
    action 'DOLLAR' (noprec):   reduce ass --> 'LET' id
    action 'SHARP' (noprec):   reduce ass --> 'LET' id
    action 'EOF' (noprec):   reduce ass --> 'LET' id
    action 'NO' (noprec):   reduce ass --> 'LET' id
    action 'OBJ' (noprec):   reduce ass --> 'LET' id
    action 'LPAREN' (noprec):   reduce ass --> 'LET' id
    action 'RPAREN' (noprec):   reduce ass --> 'LET' id
    action 'LBRACK' (noprec):   reduce ass --> 'LET' id
    action 'RBRACK' (noprec):   reduce ass --> 'LET' id
    action 'LBRACE' (noprec):   reduce ass --> 'LET' id
    action 'RBRACE' (noprec):   reduce ass --> 'LET' id
    action 'AMP' (noprec):   reduce ass --> 'LET' id
    action 'COMMA' (noprec):   reduce ass --> 'LET' id
    action 'AND' (noprec):   reduce ass --> 'LET' id
    action 'OR' (noprec):   reduce ass --> 'LET' id
    action 'MOD' (noprec):   reduce ass --> 'LET' id
    action 'EQ' (noprec):   reduce ass --> 'LET' id
    action 'GT' (noprec):   reduce ass --> 'LET' id
    action 'GE' (noprec):   reduce ass --> 'LET' id
    action 'LT' (noprec):   reduce ass --> 'LET' id
    action 'LE' (noprec):   reduce ass --> 'LET' id
    action 'PLUS' (noprec):   reduce ass --> 'LET' id
    action 'MINUS' (noprec):   reduce ass --> 'LET' id
    action 'TIMES' (noprec):   reduce ass --> 'LET' id
    action 'DIVIDE' (noprec):   reduce ass --> 'LET' id
    action 'ENDLOC' (noprec):   reduce ass --> 'LET' id
    action 'STARTLOC' (noprec):   reduce ass --> 'LET' id
    action 'FLOAT' (noprec):   reduce ass --> 'LET' id
    action 'INT' (noprec):   reduce ass --> 'LET' id
    action 'ID' (noprec):   reduce ass --> 'LET' id
    action 'COMMENT' (noprec):   reduce ass --> 'LET' id
    action 'TSTRING' (noprec):   reduce ass --> 'LET' id
    action 'error' (noprec):   reduce ass --> 'LET' id
    action '#' (noprec):   reduce ass --> 'LET' id
    action '$$' (noprec):   reduce ass --> 'LET' id

  immediate action:   reduce ass --> 'LET' id
 gotos:

state 142:
  items:
    assertOp -> ass . 
    assertOp -> ass . 'LBRACK' seq_ 'RBRACK'

  actions:
    action 'NEQ' (noprec):   reduce assertOp --> ass
    action 'EQP' (noprec):   reduce assertOp --> ass
    action 'EQM' (noprec):   reduce assertOp --> ass
    action 'INC' (noprec):   reduce assertOp --> ass
    action 'DECR' (noprec):   reduce assertOp --> ass
    action 'SET' (noprec):   reduce assertOp --> ass
    action 'LET' (noprec):   reduce assertOp --> ass
    action 'END' (noprec):   reduce assertOp --> ass
    action 'NEWLINE' (noprec):   reduce assertOp --> ass
    action 'COLON' (noprec):   reduce assertOp --> ass
    action 'ELSE' (noprec):   reduce assertOp --> ass
    action 'ELSEIF' (noprec):   reduce assertOp --> ass
    action 'IF' (noprec):   reduce assertOp --> ass
    action 'ACT' (noprec):   reduce assertOp --> ass
    action 'DOLLAR' (noprec):   reduce assertOp --> ass
    action 'SHARP' (noprec):   reduce assertOp --> ass
    action 'EOF' (noprec):   reduce assertOp --> ass
    action 'NO' (noprec):   reduce assertOp --> ass
    action 'OBJ' (noprec):   reduce assertOp --> ass
    action 'LPAREN' (noprec):   reduce assertOp --> ass
    action 'RPAREN' (noprec):   reduce assertOp --> ass
    action 'LBRACK' (noprec):   shift 143
    action 'RBRACK' (noprec):   reduce assertOp --> ass
    action 'LBRACE' (noprec):   reduce assertOp --> ass
    action 'RBRACE' (noprec):   reduce assertOp --> ass
    action 'AMP' (noprec):   reduce assertOp --> ass
    action 'COMMA' (noprec):   reduce assertOp --> ass
    action 'AND' (noprec):   reduce assertOp --> ass
    action 'OR' (noprec):   reduce assertOp --> ass
    action 'MOD' (noprec):   reduce assertOp --> ass
    action 'EQ' (noprec):   reduce assertOp --> ass
    action 'GT' (noprec):   reduce assertOp --> ass
    action 'GE' (noprec):   reduce assertOp --> ass
    action 'LT' (noprec):   reduce assertOp --> ass
    action 'LE' (noprec):   reduce assertOp --> ass
    action 'PLUS' (noprec):   reduce assertOp --> ass
    action 'MINUS' (noprec):   reduce assertOp --> ass
    action 'TIMES' (noprec):   reduce assertOp --> ass
    action 'DIVIDE' (noprec):   reduce assertOp --> ass
    action 'ENDLOC' (noprec):   reduce assertOp --> ass
    action 'STARTLOC' (noprec):   reduce assertOp --> ass
    action 'FLOAT' (noprec):   reduce assertOp --> ass
    action 'INT' (noprec):   reduce assertOp --> ass
    action 'ID' (noprec):   reduce assertOp --> ass
    action 'COMMENT' (noprec):   reduce assertOp --> ass
    action 'TSTRING' (noprec):   reduce assertOp --> ass
    action 'error' (noprec):   reduce assertOp --> ass
    action '#' (noprec):   reduce assertOp --> ass
    action '$$' (noprec):   reduce assertOp --> ass

  immediate action: <none>
 gotos:

state 143:
  items:
    assertOp -> ass 'LBRACK' . seq_ 'RBRACK'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 144
    goto expr: 146
    goto val_: 149

state 144:
  items:
    assertOp -> ass 'LBRACK' seq_ . 'RBRACK'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   shift 145
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 145:
  items:
    assertOp -> ass 'LBRACK' seq_ 'RBRACK' . 

  actions:
    action 'NEQ' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'EQP' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'EQM' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'INC' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'DECR' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'SET' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'LET' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'END' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'NEWLINE' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'COLON' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'ELSE' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'ELSEIF' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'IF' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'ACT' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'DOLLAR' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'SHARP' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'EOF' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'NO' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'OBJ' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'LPAREN' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'RPAREN' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'LBRACK' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'RBRACK' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'LBRACE' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'RBRACE' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'AMP' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'COMMA' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'AND' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'OR' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'MOD' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'EQ' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'GT' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'GE' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'LT' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'LE' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'PLUS' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'MINUS' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'TIMES' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'DIVIDE' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'ENDLOC' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'STARTLOC' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'FLOAT' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'INT' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'ID' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'COMMENT' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'TSTRING' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action 'error' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action '#' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
    action '$$' (noprec):   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'

  immediate action:   reduce assertOp --> ass 'LBRACK' seq_ 'RBRACK'
 gotos:

state 146:
  items:
    seq_ -> expr . 'COMMA' seq_
    seq_ -> expr . 
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   reduce seq_ --> expr
    action 'EQM' (noprec):   reduce seq_ --> expr
    action 'INC' (noprec):   reduce seq_ --> expr
    action 'DECR' (noprec):   reduce seq_ --> expr
    action 'SET' (noprec):   reduce seq_ --> expr
    action 'LET' (noprec):   reduce seq_ --> expr
    action 'END' (noprec):   reduce seq_ --> expr
    action 'NEWLINE' (noprec):   reduce seq_ --> expr
    action 'COLON' (noprec):   reduce seq_ --> expr
    action 'ELSE' (noprec):   reduce seq_ --> expr
    action 'ELSEIF' (noprec):   reduce seq_ --> expr
    action 'IF' (noprec):   reduce seq_ --> expr
    action 'ACT' (noprec):   reduce seq_ --> expr
    action 'DOLLAR' (noprec):   reduce seq_ --> expr
    action 'SHARP' (noprec):   reduce seq_ --> expr
    action 'EOF' (noprec):   reduce seq_ --> expr
    action 'NO' (noprec):   reduce seq_ --> expr
    action 'OBJ' (noprec):   reduce seq_ --> expr
    action 'LPAREN' (noprec):   reduce seq_ --> expr
    action 'RPAREN' (noprec):   reduce seq_ --> expr
    action 'LBRACK' (noprec):   reduce seq_ --> expr
    action 'RBRACK' (noprec):   reduce seq_ --> expr
    action 'LBRACE' (noprec):   reduce seq_ --> expr
    action 'RBRACE' (noprec):   reduce seq_ --> expr
    action 'AMP' (noprec):   reduce seq_ --> expr
    action 'COMMA' (explicit left 9998):   shift 147
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   reduce seq_ --> expr
    action 'STARTLOC' (noprec):   reduce seq_ --> expr
    action 'FLOAT' (noprec):   reduce seq_ --> expr
    action 'INT' (noprec):   reduce seq_ --> expr
    action 'ID' (noprec):   reduce seq_ --> expr
    action 'COMMENT' (noprec):   reduce seq_ --> expr
    action 'TSTRING' (noprec):   reduce seq_ --> expr
    action 'error' (noprec):   reduce seq_ --> expr
    action '#' (noprec):   reduce seq_ --> expr
    action '$$' (noprec):   reduce seq_ --> expr

  immediate action: <none>
 gotos:

state 147:
  items:
    seq_ -> expr 'COMMA' . seq_

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 148
    goto expr: 146
    goto val_: 149

state 148:
  items:
    seq_ -> expr 'COMMA' seq_ . 

  actions:
    action 'NEQ' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'EQP' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'EQM' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'INC' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'DECR' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'SET' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'LET' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'END' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'NEWLINE' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'COLON' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'ELSE' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'ELSEIF' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'IF' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'ACT' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'DOLLAR' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'SHARP' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'EOF' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'NO' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'OBJ' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'LPAREN' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'RPAREN' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'LBRACK' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'RBRACK' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'LBRACE' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'RBRACE' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'AMP' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'COMMA' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'AND' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'OR' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'MOD' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'EQ' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'GT' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'GE' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'LT' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'LE' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'PLUS' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'MINUS' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'TIMES' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'DIVIDE' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'ENDLOC' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'STARTLOC' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'FLOAT' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'INT' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'ID' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'COMMENT' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'TSTRING' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action 'error' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action '#' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_
    action '$$' (explicit left 9998):   reduce seq_ --> expr 'COMMA' seq_

  immediate action:   reduce seq_ --> expr 'COMMA' seq_
 gotos:

state 149:
  items:
    expr -> val_ . 

  actions:
    action 'NEQ' (noprec):   reduce expr --> val_
    action 'EQP' (noprec):   reduce expr --> val_
    action 'EQM' (noprec):   reduce expr --> val_
    action 'INC' (noprec):   reduce expr --> val_
    action 'DECR' (noprec):   reduce expr --> val_
    action 'SET' (noprec):   reduce expr --> val_
    action 'LET' (noprec):   reduce expr --> val_
    action 'END' (noprec):   reduce expr --> val_
    action 'NEWLINE' (noprec):   reduce expr --> val_
    action 'COLON' (noprec):   reduce expr --> val_
    action 'ELSE' (noprec):   reduce expr --> val_
    action 'ELSEIF' (noprec):   reduce expr --> val_
    action 'IF' (noprec):   reduce expr --> val_
    action 'ACT' (noprec):   reduce expr --> val_
    action 'DOLLAR' (noprec):   reduce expr --> val_
    action 'SHARP' (noprec):   reduce expr --> val_
    action 'EOF' (noprec):   reduce expr --> val_
    action 'NO' (noprec):   reduce expr --> val_
    action 'OBJ' (noprec):   reduce expr --> val_
    action 'LPAREN' (noprec):   reduce expr --> val_
    action 'RPAREN' (noprec):   reduce expr --> val_
    action 'LBRACK' (noprec):   reduce expr --> val_
    action 'RBRACK' (noprec):   reduce expr --> val_
    action 'LBRACE' (noprec):   reduce expr --> val_
    action 'RBRACE' (noprec):   reduce expr --> val_
    action 'AMP' (noprec):   reduce expr --> val_
    action 'COMMA' (noprec):   reduce expr --> val_
    action 'AND' (noprec):   reduce expr --> val_
    action 'OR' (noprec):   reduce expr --> val_
    action 'MOD' (noprec):   reduce expr --> val_
    action 'EQ' (noprec):   reduce expr --> val_
    action 'GT' (noprec):   reduce expr --> val_
    action 'GE' (noprec):   reduce expr --> val_
    action 'LT' (noprec):   reduce expr --> val_
    action 'LE' (noprec):   reduce expr --> val_
    action 'PLUS' (noprec):   reduce expr --> val_
    action 'MINUS' (noprec):   reduce expr --> val_
    action 'TIMES' (noprec):   reduce expr --> val_
    action 'DIVIDE' (noprec):   reduce expr --> val_
    action 'ENDLOC' (noprec):   reduce expr --> val_
    action 'STARTLOC' (noprec):   reduce expr --> val_
    action 'FLOAT' (noprec):   reduce expr --> val_
    action 'INT' (noprec):   reduce expr --> val_
    action 'ID' (noprec):   reduce expr --> val_
    action 'COMMENT' (noprec):   reduce expr --> val_
    action 'TSTRING' (noprec):   reduce expr --> val_
    action 'error' (noprec):   reduce expr --> val_
    action '#' (noprec):   reduce expr --> val_
    action '$$' (noprec):   reduce expr --> val_

  immediate action:   reduce expr --> val_
 gotos:

state 150:
  items:
    expr -> 'ID' . 
    expr -> 'ID' . 'LPAREN' 'RPAREN'
    expr -> 'ID' . 'LPAREN' seq_ 'RPAREN'
    expr -> 'ID' . 'LBRACK' seq_ 'RBRACK'

  actions:
    action 'NEQ' (noprec):   reduce expr --> 'ID'
    action 'EQP' (noprec):   reduce expr --> 'ID'
    action 'EQM' (noprec):   reduce expr --> 'ID'
    action 'INC' (noprec):   reduce expr --> 'ID'
    action 'DECR' (noprec):   reduce expr --> 'ID'
    action 'SET' (noprec):   reduce expr --> 'ID'
    action 'LET' (noprec):   reduce expr --> 'ID'
    action 'END' (noprec):   reduce expr --> 'ID'
    action 'NEWLINE' (noprec):   reduce expr --> 'ID'
    action 'COLON' (noprec):   reduce expr --> 'ID'
    action 'ELSE' (noprec):   reduce expr --> 'ID'
    action 'ELSEIF' (noprec):   reduce expr --> 'ID'
    action 'IF' (noprec):   reduce expr --> 'ID'
    action 'ACT' (noprec):   reduce expr --> 'ID'
    action 'DOLLAR' (noprec):   reduce expr --> 'ID'
    action 'SHARP' (noprec):   reduce expr --> 'ID'
    action 'EOF' (noprec):   reduce expr --> 'ID'
    action 'NO' (noprec):   reduce expr --> 'ID'
    action 'OBJ' (noprec):   reduce expr --> 'ID'
    action 'LPAREN' (explicit nonassoc 9997):   shift 151
    action 'RPAREN' (noprec):   reduce expr --> 'ID'
    action 'LBRACK' (noprec):   shift 155
    action 'RBRACK' (noprec):   reduce expr --> 'ID'
    action 'LBRACE' (noprec):   reduce expr --> 'ID'
    action 'RBRACE' (noprec):   reduce expr --> 'ID'
    action 'AMP' (noprec):   reduce expr --> 'ID'
    action 'COMMA' (noprec):   reduce expr --> 'ID'
    action 'AND' (noprec):   reduce expr --> 'ID'
    action 'OR' (noprec):   reduce expr --> 'ID'
    action 'MOD' (noprec):   reduce expr --> 'ID'
    action 'EQ' (noprec):   reduce expr --> 'ID'
    action 'GT' (noprec):   reduce expr --> 'ID'
    action 'GE' (noprec):   reduce expr --> 'ID'
    action 'LT' (noprec):   reduce expr --> 'ID'
    action 'LE' (noprec):   reduce expr --> 'ID'
    action 'PLUS' (noprec):   reduce expr --> 'ID'
    action 'MINUS' (noprec):   reduce expr --> 'ID'
    action 'TIMES' (noprec):   reduce expr --> 'ID'
    action 'DIVIDE' (noprec):   reduce expr --> 'ID'
    action 'ENDLOC' (noprec):   reduce expr --> 'ID'
    action 'STARTLOC' (noprec):   reduce expr --> 'ID'
    action 'FLOAT' (noprec):   reduce expr --> 'ID'
    action 'INT' (noprec):   reduce expr --> 'ID'
    action 'ID' (noprec):   reduce expr --> 'ID'
    action 'COMMENT' (noprec):   reduce expr --> 'ID'
    action 'TSTRING' (noprec):   reduce expr --> 'ID'
    action 'error' (noprec):   reduce expr --> 'ID'
    action '#' (noprec):   reduce expr --> 'ID'
    action '$$' (noprec):   reduce expr --> 'ID'

  immediate action: <none>
 gotos:

state 151:
  items:
    expr -> 'ID' 'LPAREN' . 'RPAREN'
    expr -> 'ID' 'LPAREN' . seq_ 'RPAREN'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (explicit nonassoc 9996):   shift 152
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 153
    goto expr: 146
    goto val_: 149

state 152:
  items:
    expr -> 'ID' 'LPAREN' 'RPAREN' . 

  actions:
    action 'NEQ' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'EQP' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'EQM' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'INC' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'DECR' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'SET' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'LET' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'END' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'NEWLINE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'COLON' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'ELSE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'ELSEIF' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'IF' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'ACT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'DOLLAR' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'SHARP' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'EOF' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'NO' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'OBJ' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'LPAREN' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'RPAREN' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'LBRACK' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'RBRACK' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'LBRACE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'RBRACE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'AMP' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'COMMA' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'AND' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'OR' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'MOD' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'EQ' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'GT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'GE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'LT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'LE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'PLUS' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'MINUS' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'TIMES' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'DIVIDE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'ENDLOC' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'STARTLOC' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'FLOAT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'INT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'ID' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'COMMENT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'TSTRING' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action 'error' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action '#' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
    action '$$' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' 'RPAREN'

  immediate action:   reduce expr --> 'ID' 'LPAREN' 'RPAREN'
 gotos:

state 153:
  items:
    expr -> 'ID' 'LPAREN' seq_ . 'RPAREN'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (explicit nonassoc 9996):   shift 154
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 154:
  items:
    expr -> 'ID' 'LPAREN' seq_ 'RPAREN' . 

  actions:
    action 'NEQ' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'EQP' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'EQM' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'INC' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'DECR' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'SET' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'LET' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'END' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'NEWLINE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'COLON' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'ELSE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'ELSEIF' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'IF' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'ACT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'DOLLAR' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'SHARP' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'EOF' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'NO' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'OBJ' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'LPAREN' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'RPAREN' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'LBRACK' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'RBRACK' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'LBRACE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'RBRACE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'AMP' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'COMMA' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'AND' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'OR' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'MOD' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'EQ' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'GT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'GE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'LT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'LE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'PLUS' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'MINUS' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'TIMES' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'DIVIDE' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'ENDLOC' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'STARTLOC' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'FLOAT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'INT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'ID' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'COMMENT' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'TSTRING' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action 'error' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action '#' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
    action '$$' (explicit nonassoc 9996):   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'

  immediate action:   reduce expr --> 'ID' 'LPAREN' seq_ 'RPAREN'
 gotos:

state 155:
  items:
    expr -> 'ID' 'LBRACK' . seq_ 'RBRACK'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto seq_: 156
    goto expr: 146
    goto val_: 149

state 156:
  items:
    expr -> 'ID' 'LBRACK' seq_ . 'RBRACK'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   shift 157
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 157:
  items:
    expr -> 'ID' 'LBRACK' seq_ 'RBRACK' . 

  actions:
    action 'NEQ' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'EQP' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'EQM' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'INC' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'DECR' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'SET' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'LET' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'END' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'NEWLINE' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'COLON' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'ELSE' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'ELSEIF' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'IF' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'ACT' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'DOLLAR' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'SHARP' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'EOF' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'NO' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'OBJ' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'LPAREN' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'RPAREN' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'LBRACK' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'RBRACK' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'LBRACE' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'RBRACE' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'AMP' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'COMMA' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'AND' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'OR' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'MOD' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'EQ' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'GT' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'GE' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'LT' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'LE' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'PLUS' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'MINUS' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'TIMES' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'DIVIDE' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'ENDLOC' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'STARTLOC' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'FLOAT' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'INT' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'ID' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'COMMENT' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'TSTRING' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action 'error' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action '#' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
    action '$$' (noprec):   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'

  immediate action:   reduce expr --> 'ID' 'LBRACK' seq_ 'RBRACK'
 gotos:

state 158:
  items:
    expr -> 'NO' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 159
    goto val_: 149

state 159:
  items:
    expr -> 'NO' expr . 
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'EQM' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'INC' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'DECR' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'SET' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'LET' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'END' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'NEWLINE' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'COLON' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'ELSE' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'ELSEIF' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'IF' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'ACT' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'DOLLAR' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'SHARP' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'EOF' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'NO' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'OBJ' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'LPAREN' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'RPAREN' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'LBRACK' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'RBRACK' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'LBRACE' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'RBRACE' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'AMP' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'COMMA' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'AND' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'OR' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'STARTLOC' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'FLOAT' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'INT' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'ID' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'COMMENT' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'TSTRING' (explicit right 9989):   reduce expr --> 'NO' expr
    action 'error' (explicit right 9989):   reduce expr --> 'NO' expr
    action '#' (explicit right 9989):   reduce expr --> 'NO' expr
    action '$$' (explicit right 9989):   reduce expr --> 'NO' expr

  immediate action: <none>
 gotos:

state 160:
  items:
    expr -> 'OBJ' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 161
    goto val_: 149

state 161:
  items:
    expr -> 'OBJ' expr . 
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'EQP' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'EQM' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'INC' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'DECR' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'SET' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'LET' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'END' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'NEWLINE' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'COLON' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'ELSE' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'ELSEIF' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'IF' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'ACT' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'DOLLAR' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'SHARP' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'EOF' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'NO' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'OBJ' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'LPAREN' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'RPAREN' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'LBRACK' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'RBRACK' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'LBRACE' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'RBRACE' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'AMP' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'COMMA' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'AND' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'OR' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'GT' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'GE' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'LT' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'LE' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'STARTLOC' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'FLOAT' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'INT' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'ID' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'COMMENT' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'TSTRING' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action 'error' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action '#' (explicit right 9991):   reduce expr --> 'OBJ' expr
    action '$$' (explicit right 9991):   reduce expr --> 'OBJ' expr

  immediate action: <none>
 gotos:

state 162:
  items:
    expr -> 'LPAREN' . expr 'RPAREN'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 163
    goto val_: 149

state 163:
  items:
    expr -> 'LPAREN' expr . 'RPAREN'
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (explicit nonassoc 9996):   shift 164
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   shift 191
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 164:
  items:
    expr -> 'LPAREN' expr 'RPAREN' . 

  actions:
    action 'NEQ' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'EQP' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'EQM' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'INC' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'DECR' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'SET' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'LET' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'END' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'NEWLINE' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'COLON' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'ELSE' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'ELSEIF' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'IF' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'ACT' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'DOLLAR' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'SHARP' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'EOF' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'NO' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'OBJ' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'LPAREN' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'RPAREN' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'LBRACK' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'RBRACK' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'LBRACE' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'RBRACE' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'AMP' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'COMMA' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'AND' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'OR' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'MOD' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'EQ' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'GT' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'GE' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'LT' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'LE' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'PLUS' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'MINUS' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'TIMES' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'DIVIDE' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'ENDLOC' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'STARTLOC' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'FLOAT' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'INT' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'ID' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'COMMENT' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'TSTRING' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action 'error' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action '#' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'
    action '$$' (explicit nonassoc 9996):   reduce expr --> 'LPAREN' expr 'RPAREN'

  immediate action:   reduce expr --> 'LPAREN' expr 'RPAREN'
 gotos:

state 165:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr 'PLUS' expr . 
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'EQP' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'EQM' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'INC' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'DECR' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'SET' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'LET' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'END' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'NEWLINE' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'COLON' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'ELSE' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'ELSEIF' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'IF' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'ACT' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'DOLLAR' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'SHARP' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'EOF' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'NO' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'OBJ' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'LPAREN' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'RPAREN' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'LBRACK' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'RBRACK' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'LBRACE' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'RBRACE' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'AMP' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'COMMA' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'AND' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'OR' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'GT' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'GE' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'LT' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'LE' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'PLUS' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'MINUS' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'STARTLOC' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'FLOAT' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'INT' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'ID' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'COMMENT' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'TSTRING' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action 'error' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action '#' (explicit left 9992):   reduce expr --> expr 'PLUS' expr
    action '$$' (explicit left 9992):   reduce expr --> expr 'PLUS' expr

  immediate action: <none>
 gotos:

state 166:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr 'MINUS' expr . 
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'EQP' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'EQM' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'INC' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'DECR' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'SET' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'LET' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'END' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'NEWLINE' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'COLON' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'ELSE' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'ELSEIF' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'IF' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'ACT' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'DOLLAR' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'SHARP' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'EOF' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'NO' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'OBJ' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'LPAREN' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'RPAREN' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'LBRACK' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'RBRACK' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'LBRACE' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'RBRACE' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'AMP' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'COMMA' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'AND' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'OR' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'GT' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'GE' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'LT' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'LE' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'PLUS' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'MINUS' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'STARTLOC' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'FLOAT' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'INT' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'ID' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'COMMENT' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'TSTRING' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action 'error' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action '#' (explicit left 9992):   reduce expr --> expr 'MINUS' expr
    action '$$' (explicit left 9992):   reduce expr --> expr 'MINUS' expr

  immediate action: <none>
 gotos:

state 167:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr 'TIMES' expr . 
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'EQP' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'EQM' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'INC' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'DECR' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'SET' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'LET' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'END' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'NEWLINE' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'COLON' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'ELSE' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'ELSEIF' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'IF' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'ACT' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'DOLLAR' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'SHARP' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'EOF' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'NO' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'OBJ' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'LPAREN' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'RPAREN' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'LBRACK' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'RBRACK' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'LBRACE' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'RBRACE' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'AMP' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'COMMA' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'AND' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'OR' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'MOD' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'EQ' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'GT' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'GE' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'LT' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'LE' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'PLUS' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'MINUS' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'TIMES' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'DIVIDE' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'ENDLOC' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'STARTLOC' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'FLOAT' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'INT' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'ID' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'COMMENT' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'TSTRING' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action 'error' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action '#' (explicit left 9994):   reduce expr --> expr 'TIMES' expr
    action '$$' (explicit left 9994):   reduce expr --> expr 'TIMES' expr

  immediate action: <none>
 gotos:

state 168:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr 'DIVIDE' expr . 
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'EQP' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'EQM' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'INC' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'DECR' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'SET' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'LET' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'END' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'NEWLINE' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'COLON' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'ELSE' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'ELSEIF' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'IF' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'ACT' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'DOLLAR' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'SHARP' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'EOF' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'NO' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'OBJ' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'LPAREN' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'RPAREN' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'LBRACK' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'RBRACK' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'LBRACE' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'RBRACE' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'AMP' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'COMMA' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'AND' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'OR' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'MOD' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'EQ' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'GT' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'GE' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'LT' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'LE' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'PLUS' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'MINUS' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'TIMES' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'DIVIDE' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'ENDLOC' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'STARTLOC' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'FLOAT' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'INT' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'ID' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'COMMENT' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'TSTRING' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action 'error' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action '#' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr
    action '$$' (explicit left 9994):   reduce expr --> expr 'DIVIDE' expr

  immediate action: <none>
 gotos:

state 169:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr 'EQ' expr . 
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'EQP' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'EQM' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'INC' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'DECR' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'SET' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'LET' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'END' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'NEWLINE' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'COLON' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'ELSE' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'ELSEIF' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'IF' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'ACT' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'DOLLAR' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'SHARP' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'EOF' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'NO' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'OBJ' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'LPAREN' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'RPAREN' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'LBRACK' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'RBRACK' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'LBRACE' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'RBRACE' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'AMP' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'COMMA' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'AND' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'OR' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'GT' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'GE' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'LT' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'LE' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'STARTLOC' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'FLOAT' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'INT' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'ID' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'COMMENT' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'TSTRING' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action 'error' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action '#' (explicit left 9990):   reduce expr --> expr 'EQ' expr
    action '$$' (explicit left 9990):   reduce expr --> expr 'EQ' expr

  immediate action: <none>
 gotos:

state 170:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr 'GT' expr . 
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'EQP' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'EQM' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'INC' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'DECR' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'SET' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'LET' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'END' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'NEWLINE' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'COLON' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'ELSE' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'ELSEIF' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'IF' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'ACT' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'DOLLAR' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'SHARP' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'EOF' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'NO' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'OBJ' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'LPAREN' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'RPAREN' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'LBRACK' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'RBRACK' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'LBRACE' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'RBRACE' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'AMP' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'COMMA' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'AND' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'OR' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'GT' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'GE' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'LT' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'LE' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'STARTLOC' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'FLOAT' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'INT' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'ID' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'COMMENT' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'TSTRING' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action 'error' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action '#' (explicit left 9990):   reduce expr --> expr 'GT' expr
    action '$$' (explicit left 9990):   reduce expr --> expr 'GT' expr

  immediate action: <none>
 gotos:

state 171:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr 'GE' expr . 
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'EQP' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'EQM' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'INC' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'DECR' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'SET' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'LET' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'END' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'NEWLINE' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'COLON' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'ELSE' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'ELSEIF' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'IF' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'ACT' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'DOLLAR' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'SHARP' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'EOF' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'NO' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'OBJ' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'LPAREN' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'RPAREN' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'LBRACK' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'RBRACK' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'LBRACE' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'RBRACE' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'AMP' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'COMMA' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'AND' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'OR' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'GT' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'GE' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'LT' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'LE' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'STARTLOC' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'FLOAT' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'INT' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'ID' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'COMMENT' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'TSTRING' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action 'error' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action '#' (explicit left 9990):   reduce expr --> expr 'GE' expr
    action '$$' (explicit left 9990):   reduce expr --> expr 'GE' expr

  immediate action: <none>
 gotos:

state 172:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr 'LT' expr . 
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'EQP' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'EQM' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'INC' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'DECR' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'SET' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'LET' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'END' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'NEWLINE' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'COLON' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'ELSE' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'ELSEIF' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'IF' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'ACT' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'DOLLAR' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'SHARP' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'EOF' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'NO' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'OBJ' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'LPAREN' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'RPAREN' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'LBRACK' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'RBRACK' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'LBRACE' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'RBRACE' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'AMP' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'COMMA' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'AND' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'OR' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'GT' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'GE' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'LT' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'LE' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'STARTLOC' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'FLOAT' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'INT' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'ID' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'COMMENT' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'TSTRING' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action 'error' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action '#' (explicit left 9990):   reduce expr --> expr 'LT' expr
    action '$$' (explicit left 9990):   reduce expr --> expr 'LT' expr

  immediate action: <none>
 gotos:

state 173:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr 'LE' expr . 
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'EQP' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'EQM' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'INC' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'DECR' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'SET' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'LET' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'END' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'NEWLINE' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'COLON' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'ELSE' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'ELSEIF' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'IF' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'ACT' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'DOLLAR' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'SHARP' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'EOF' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'NO' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'OBJ' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'LPAREN' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'RPAREN' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'LBRACK' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'RBRACK' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'LBRACE' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'RBRACE' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'AMP' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'COMMA' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'AND' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'OR' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'GT' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'GE' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'LT' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'LE' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'STARTLOC' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'FLOAT' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'INT' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'ID' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'COMMENT' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'TSTRING' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action 'error' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action '#' (explicit left 9990):   reduce expr --> expr 'LE' expr
    action '$$' (explicit left 9990):   reduce expr --> expr 'LE' expr

  immediate action: <none>
 gotos:

state 174:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr 'NEQ' expr . 
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'EQP' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'EQM' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'INC' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'DECR' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'SET' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'LET' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'END' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'NEWLINE' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'COLON' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'ELSE' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'ELSEIF' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'IF' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'ACT' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'DOLLAR' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'SHARP' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'EOF' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'NO' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'OBJ' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'LPAREN' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'RPAREN' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'LBRACK' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'RBRACK' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'LBRACE' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'RBRACE' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'AMP' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'COMMA' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'AND' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'OR' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'GT' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'GE' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'LT' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'LE' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'STARTLOC' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'FLOAT' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'INT' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'ID' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'COMMENT' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'TSTRING' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action 'error' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action '#' (explicit left 9990):   reduce expr --> expr 'NEQ' expr
    action '$$' (explicit left 9990):   reduce expr --> expr 'NEQ' expr

  immediate action: <none>
 gotos:

state 175:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr 'AND' expr . 
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'EQM' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'INC' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'DECR' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'SET' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'LET' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'END' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'NEWLINE' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'COLON' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'ELSE' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'ELSEIF' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'IF' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'ACT' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'DOLLAR' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'SHARP' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'EOF' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'NO' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'OBJ' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'LPAREN' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'RPAREN' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'LBRACK' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'RBRACK' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'LBRACE' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'RBRACE' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'AMP' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'COMMA' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'AND' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'OR' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'STARTLOC' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'FLOAT' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'INT' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'ID' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'COMMENT' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'TSTRING' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action 'error' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action '#' (explicit left 9988):   reduce expr --> expr 'AND' expr
    action '$$' (explicit left 9988):   reduce expr --> expr 'AND' expr

  immediate action: <none>
 gotos:

state 176:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr 'OR' expr . 
    expr -> expr . 'MOD' expr

  actions:
    action 'NEQ' (explicit left 9990):   shift 189
    action 'EQP' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'EQM' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'INC' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'DECR' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'SET' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'LET' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'END' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'NEWLINE' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'COLON' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'ELSE' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'ELSEIF' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'IF' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'ACT' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'DOLLAR' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'SHARP' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'EOF' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'NO' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'OBJ' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'LPAREN' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'RPAREN' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'LBRACK' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'RBRACK' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'LBRACE' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'RBRACE' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'AMP' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'COMMA' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'AND' (explicit left 9988):   shift 190
    action 'OR' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'MOD' (explicit left 9993):   shift 192
    action 'EQ' (explicit left 9990):   shift 184
    action 'GT' (explicit left 9990):   shift 185
    action 'GE' (explicit left 9990):   shift 186
    action 'LT' (explicit left 9990):   shift 187
    action 'LE' (explicit left 9990):   shift 188
    action 'PLUS' (explicit left 9992):   shift 178
    action 'MINUS' (explicit left 9992):   shift 179
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'STARTLOC' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'FLOAT' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'INT' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'ID' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'COMMENT' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'TSTRING' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action 'error' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action '#' (explicit left 9987):   reduce expr --> expr 'OR' expr
    action '$$' (explicit left 9987):   reduce expr --> expr 'OR' expr

  immediate action: <none>
 gotos:

state 177:
  items:
    expr -> expr . 'PLUS' expr
    expr -> expr . 'MINUS' expr
    expr -> expr . 'TIMES' expr
    expr -> expr . 'DIVIDE' expr
    expr -> expr . 'EQ' expr
    expr -> expr . 'GT' expr
    expr -> expr . 'GE' expr
    expr -> expr . 'LT' expr
    expr -> expr . 'LE' expr
    expr -> expr . 'NEQ' expr
    expr -> expr . 'AND' expr
    expr -> expr . 'OR' expr
    expr -> expr . 'MOD' expr
    expr -> expr 'MOD' expr . 

  actions:
    action 'NEQ' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'EQP' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'EQM' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'INC' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'DECR' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'SET' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'LET' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'END' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'NEWLINE' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'COLON' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'ELSE' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'ELSEIF' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'IF' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'ACT' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'DOLLAR' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'SHARP' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'EOF' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'NO' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'OBJ' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'LPAREN' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'RPAREN' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'LBRACK' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'RBRACK' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'LBRACE' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'RBRACE' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'AMP' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'COMMA' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'AND' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'OR' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'MOD' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'EQ' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'GT' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'GE' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'LT' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'LE' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'PLUS' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'MINUS' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'TIMES' (explicit left 9994):   shift 182
    action 'DIVIDE' (explicit left 9994):   shift 183
    action 'ENDLOC' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'STARTLOC' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'FLOAT' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'INT' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'ID' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'COMMENT' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'TSTRING' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action 'error' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action '#' (explicit left 9993):   reduce expr --> expr 'MOD' expr
    action '$$' (explicit left 9993):   reduce expr --> expr 'MOD' expr

  immediate action: <none>
 gotos:

state 178:
  items:
    expr -> expr 'PLUS' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 165
    goto val_: 149

state 179:
  items:
    expr -> expr 'MINUS' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 166
    goto val_: 149

state 180:
  items:
    expr -> 'MINUS' . 'INT'

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (noprec):   error
    action 'OBJ' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   error
    action 'INT' (noprec):   shift 181
    action 'ID' (noprec):   error
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 181:
  items:
    expr -> 'MINUS' 'INT' . 

  actions:
    action 'NEQ' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'EQP' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'EQM' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'INC' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'DECR' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'SET' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'LET' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'END' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'NEWLINE' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'COLON' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'ELSE' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'ELSEIF' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'IF' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'ACT' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'DOLLAR' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'SHARP' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'EOF' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'NO' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'OBJ' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'LPAREN' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'RPAREN' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'LBRACK' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'RBRACK' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'LBRACE' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'RBRACE' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'AMP' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'COMMA' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'AND' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'OR' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'MOD' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'EQ' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'GT' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'GE' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'LT' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'LE' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'PLUS' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'MINUS' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'TIMES' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'DIVIDE' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'ENDLOC' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'STARTLOC' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'FLOAT' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'INT' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'ID' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'COMMENT' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'TSTRING' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action 'error' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action '#' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'
    action '$$' (explicit left 9992):   reduce expr --> 'MINUS' 'INT'

  immediate action:   reduce expr --> 'MINUS' 'INT'
 gotos:

state 182:
  items:
    expr -> expr 'TIMES' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 167
    goto val_: 149

state 183:
  items:
    expr -> expr 'DIVIDE' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 168
    goto val_: 149

state 184:
  items:
    expr -> expr 'EQ' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 169
    goto val_: 149

state 185:
  items:
    expr -> expr 'GT' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 170
    goto val_: 149

state 186:
  items:
    expr -> expr 'GE' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 171
    goto val_: 149

state 187:
  items:
    expr -> expr 'LT' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 172
    goto val_: 149

state 188:
  items:
    expr -> expr 'LE' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 173
    goto val_: 149

state 189:
  items:
    expr -> expr 'NEQ' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 174
    goto val_: 149

state 190:
  items:
    expr -> expr 'AND' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 175
    goto val_: 149

state 191:
  items:
    expr -> expr 'OR' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 176
    goto val_: 149

state 192:
  items:
    expr -> expr 'MOD' . expr

  actions:
    action 'NEQ' (noprec):   error
    action 'EQP' (noprec):   error
    action 'EQM' (noprec):   error
    action 'INC' (noprec):   error
    action 'DECR' (noprec):   error
    action 'SET' (noprec):   error
    action 'LET' (noprec):   error
    action 'END' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'COLON' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'ELSEIF' (noprec):   error
    action 'IF' (noprec):   error
    action 'ACT' (noprec):   error
    action 'DOLLAR' (noprec):   error
    action 'SHARP' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NO' (explicit right 9989):   shift 158
    action 'OBJ' (explicit right 9991):   shift 160
    action 'LPAREN' (explicit nonassoc 9997):   shift 162
    action 'RPAREN' (noprec):   error
    action 'LBRACK' (noprec):   error
    action 'RBRACK' (noprec):   error
    action 'LBRACE' (noprec):   error
    action 'RBRACE' (noprec):   error
    action 'AMP' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'MOD' (noprec):   error
    action 'EQ' (noprec):   error
    action 'GT' (noprec):   error
    action 'GE' (noprec):   error
    action 'LT' (noprec):   error
    action 'LE' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (explicit left 9992):   shift 180
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ENDLOC' (noprec):   error
    action 'STARTLOC' (noprec):   error
    action 'FLOAT' (noprec):   shift 194
    action 'INT' (noprec):   shift 193
    action 'ID' (noprec):   shift 150
    action 'COMMENT' (noprec):   error
    action 'TSTRING' (noprec):   shift 195
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto expr: 177
    goto val_: 149

state 193:
  items:
    val_ -> 'INT' . 

  actions:
    action 'NEQ' (noprec):   reduce val_ --> 'INT'
    action 'EQP' (noprec):   reduce val_ --> 'INT'
    action 'EQM' (noprec):   reduce val_ --> 'INT'
    action 'INC' (noprec):   reduce val_ --> 'INT'
    action 'DECR' (noprec):   reduce val_ --> 'INT'
    action 'SET' (noprec):   reduce val_ --> 'INT'
    action 'LET' (noprec):   reduce val_ --> 'INT'
    action 'END' (noprec):   reduce val_ --> 'INT'
    action 'NEWLINE' (noprec):   reduce val_ --> 'INT'
    action 'COLON' (noprec):   reduce val_ --> 'INT'
    action 'ELSE' (noprec):   reduce val_ --> 'INT'
    action 'ELSEIF' (noprec):   reduce val_ --> 'INT'
    action 'IF' (noprec):   reduce val_ --> 'INT'
    action 'ACT' (noprec):   reduce val_ --> 'INT'
    action 'DOLLAR' (noprec):   reduce val_ --> 'INT'
    action 'SHARP' (noprec):   reduce val_ --> 'INT'
    action 'EOF' (noprec):   reduce val_ --> 'INT'
    action 'NO' (noprec):   reduce val_ --> 'INT'
    action 'OBJ' (noprec):   reduce val_ --> 'INT'
    action 'LPAREN' (noprec):   reduce val_ --> 'INT'
    action 'RPAREN' (noprec):   reduce val_ --> 'INT'
    action 'LBRACK' (noprec):   reduce val_ --> 'INT'
    action 'RBRACK' (noprec):   reduce val_ --> 'INT'
    action 'LBRACE' (noprec):   reduce val_ --> 'INT'
    action 'RBRACE' (noprec):   reduce val_ --> 'INT'
    action 'AMP' (noprec):   reduce val_ --> 'INT'
    action 'COMMA' (noprec):   reduce val_ --> 'INT'
    action 'AND' (noprec):   reduce val_ --> 'INT'
    action 'OR' (noprec):   reduce val_ --> 'INT'
    action 'MOD' (noprec):   reduce val_ --> 'INT'
    action 'EQ' (noprec):   reduce val_ --> 'INT'
    action 'GT' (noprec):   reduce val_ --> 'INT'
    action 'GE' (noprec):   reduce val_ --> 'INT'
    action 'LT' (noprec):   reduce val_ --> 'INT'
    action 'LE' (noprec):   reduce val_ --> 'INT'
    action 'PLUS' (noprec):   reduce val_ --> 'INT'
    action 'MINUS' (noprec):   reduce val_ --> 'INT'
    action 'TIMES' (noprec):   reduce val_ --> 'INT'
    action 'DIVIDE' (noprec):   reduce val_ --> 'INT'
    action 'ENDLOC' (noprec):   reduce val_ --> 'INT'
    action 'STARTLOC' (noprec):   reduce val_ --> 'INT'
    action 'FLOAT' (noprec):   reduce val_ --> 'INT'
    action 'INT' (noprec):   reduce val_ --> 'INT'
    action 'ID' (noprec):   reduce val_ --> 'INT'
    action 'COMMENT' (noprec):   reduce val_ --> 'INT'
    action 'TSTRING' (noprec):   reduce val_ --> 'INT'
    action 'error' (noprec):   reduce val_ --> 'INT'
    action '#' (noprec):   reduce val_ --> 'INT'
    action '$$' (noprec):   reduce val_ --> 'INT'

  immediate action:   reduce val_ --> 'INT'
 gotos:

state 194:
  items:
    val_ -> 'FLOAT' . 

  actions:
    action 'NEQ' (noprec):   reduce val_ --> 'FLOAT'
    action 'EQP' (noprec):   reduce val_ --> 'FLOAT'
    action 'EQM' (noprec):   reduce val_ --> 'FLOAT'
    action 'INC' (noprec):   reduce val_ --> 'FLOAT'
    action 'DECR' (noprec):   reduce val_ --> 'FLOAT'
    action 'SET' (noprec):   reduce val_ --> 'FLOAT'
    action 'LET' (noprec):   reduce val_ --> 'FLOAT'
    action 'END' (noprec):   reduce val_ --> 'FLOAT'
    action 'NEWLINE' (noprec):   reduce val_ --> 'FLOAT'
    action 'COLON' (noprec):   reduce val_ --> 'FLOAT'
    action 'ELSE' (noprec):   reduce val_ --> 'FLOAT'
    action 'ELSEIF' (noprec):   reduce val_ --> 'FLOAT'
    action 'IF' (noprec):   reduce val_ --> 'FLOAT'
    action 'ACT' (noprec):   reduce val_ --> 'FLOAT'
    action 'DOLLAR' (noprec):   reduce val_ --> 'FLOAT'
    action 'SHARP' (noprec):   reduce val_ --> 'FLOAT'
    action 'EOF' (noprec):   reduce val_ --> 'FLOAT'
    action 'NO' (noprec):   reduce val_ --> 'FLOAT'
    action 'OBJ' (noprec):   reduce val_ --> 'FLOAT'
    action 'LPAREN' (noprec):   reduce val_ --> 'FLOAT'
    action 'RPAREN' (noprec):   reduce val_ --> 'FLOAT'
    action 'LBRACK' (noprec):   reduce val_ --> 'FLOAT'
    action 'RBRACK' (noprec):   reduce val_ --> 'FLOAT'
    action 'LBRACE' (noprec):   reduce val_ --> 'FLOAT'
    action 'RBRACE' (noprec):   reduce val_ --> 'FLOAT'
    action 'AMP' (noprec):   reduce val_ --> 'FLOAT'
    action 'COMMA' (noprec):   reduce val_ --> 'FLOAT'
    action 'AND' (noprec):   reduce val_ --> 'FLOAT'
    action 'OR' (noprec):   reduce val_ --> 'FLOAT'
    action 'MOD' (noprec):   reduce val_ --> 'FLOAT'
    action 'EQ' (noprec):   reduce val_ --> 'FLOAT'
    action 'GT' (noprec):   reduce val_ --> 'FLOAT'
    action 'GE' (noprec):   reduce val_ --> 'FLOAT'
    action 'LT' (noprec):   reduce val_ --> 'FLOAT'
    action 'LE' (noprec):   reduce val_ --> 'FLOAT'
    action 'PLUS' (noprec):   reduce val_ --> 'FLOAT'
    action 'MINUS' (noprec):   reduce val_ --> 'FLOAT'
    action 'TIMES' (noprec):   reduce val_ --> 'FLOAT'
    action 'DIVIDE' (noprec):   reduce val_ --> 'FLOAT'
    action 'ENDLOC' (noprec):   reduce val_ --> 'FLOAT'
    action 'STARTLOC' (noprec):   reduce val_ --> 'FLOAT'
    action 'FLOAT' (noprec):   reduce val_ --> 'FLOAT'
    action 'INT' (noprec):   reduce val_ --> 'FLOAT'
    action 'ID' (noprec):   reduce val_ --> 'FLOAT'
    action 'COMMENT' (noprec):   reduce val_ --> 'FLOAT'
    action 'TSTRING' (noprec):   reduce val_ --> 'FLOAT'
    action 'error' (noprec):   reduce val_ --> 'FLOAT'
    action '#' (noprec):   reduce val_ --> 'FLOAT'
    action '$$' (noprec):   reduce val_ --> 'FLOAT'

  immediate action:   reduce val_ --> 'FLOAT'
 gotos:

state 195:
  items:
    val_ -> 'TSTRING' . 

  actions:
    action 'NEQ' (noprec):   reduce val_ --> 'TSTRING'
    action 'EQP' (noprec):   reduce val_ --> 'TSTRING'
    action 'EQM' (noprec):   reduce val_ --> 'TSTRING'
    action 'INC' (noprec):   reduce val_ --> 'TSTRING'
    action 'DECR' (noprec):   reduce val_ --> 'TSTRING'
    action 'SET' (noprec):   reduce val_ --> 'TSTRING'
    action 'LET' (noprec):   reduce val_ --> 'TSTRING'
    action 'END' (noprec):   reduce val_ --> 'TSTRING'
    action 'NEWLINE' (noprec):   reduce val_ --> 'TSTRING'
    action 'COLON' (noprec):   reduce val_ --> 'TSTRING'
    action 'ELSE' (noprec):   reduce val_ --> 'TSTRING'
    action 'ELSEIF' (noprec):   reduce val_ --> 'TSTRING'
    action 'IF' (noprec):   reduce val_ --> 'TSTRING'
    action 'ACT' (noprec):   reduce val_ --> 'TSTRING'
    action 'DOLLAR' (noprec):   reduce val_ --> 'TSTRING'
    action 'SHARP' (noprec):   reduce val_ --> 'TSTRING'
    action 'EOF' (noprec):   reduce val_ --> 'TSTRING'
    action 'NO' (noprec):   reduce val_ --> 'TSTRING'
    action 'OBJ' (noprec):   reduce val_ --> 'TSTRING'
    action 'LPAREN' (noprec):   reduce val_ --> 'TSTRING'
    action 'RPAREN' (noprec):   reduce val_ --> 'TSTRING'
    action 'LBRACK' (noprec):   reduce val_ --> 'TSTRING'
    action 'RBRACK' (noprec):   reduce val_ --> 'TSTRING'
    action 'LBRACE' (noprec):   reduce val_ --> 'TSTRING'
    action 'RBRACE' (noprec):   reduce val_ --> 'TSTRING'
    action 'AMP' (noprec):   reduce val_ --> 'TSTRING'
    action 'COMMA' (noprec):   reduce val_ --> 'TSTRING'
    action 'AND' (noprec):   reduce val_ --> 'TSTRING'
    action 'OR' (noprec):   reduce val_ --> 'TSTRING'
    action 'MOD' (noprec):   reduce val_ --> 'TSTRING'
    action 'EQ' (noprec):   reduce val_ --> 'TSTRING'
    action 'GT' (noprec):   reduce val_ --> 'TSTRING'
    action 'GE' (noprec):   reduce val_ --> 'TSTRING'
    action 'LT' (noprec):   reduce val_ --> 'TSTRING'
    action 'LE' (noprec):   reduce val_ --> 'TSTRING'
    action 'PLUS' (noprec):   reduce val_ --> 'TSTRING'
    action 'MINUS' (noprec):   reduce val_ --> 'TSTRING'
    action 'TIMES' (noprec):   reduce val_ --> 'TSTRING'
    action 'DIVIDE' (noprec):   reduce val_ --> 'TSTRING'
    action 'ENDLOC' (noprec):   reduce val_ --> 'TSTRING'
    action 'STARTLOC' (noprec):   reduce val_ --> 'TSTRING'
    action 'FLOAT' (noprec):   reduce val_ --> 'TSTRING'
    action 'INT' (noprec):   reduce val_ --> 'TSTRING'
    action 'ID' (noprec):   reduce val_ --> 'TSTRING'
    action 'COMMENT' (noprec):   reduce val_ --> 'TSTRING'
    action 'TSTRING' (noprec):   reduce val_ --> 'TSTRING'
    action 'error' (noprec):   reduce val_ --> 'TSTRING'
    action '#' (noprec):   reduce val_ --> 'TSTRING'
    action '$$' (noprec):   reduce val_ --> 'TSTRING'

  immediate action:   reduce val_ --> 'TSTRING'
 gotos:


startStates = 0;2
------------------------
