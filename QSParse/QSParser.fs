// Implementation file for parser generated by fsyacc
module QSParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
   
open QS

let except str =  failwithf "%s" str
let exceptP (p:Parsing.IParseState) str = 
    let p = p.ParserLocalStore.["LexBuffer"] :?> Microsoft.FSharp.Text.Lexing.LexBuffer<char>
    
    printfn "%A" p.Lexeme
    printfn "%A" p.StartPos
    printfn "%A" p.EndPos

    failwithf "%s" str

let parse_error_rich = Some (fun (ctxt: Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
    let p =
        ctxt.ParseState.ParserLocalStore.["LexBuffer"] :?> Microsoft.FSharp.Text.Lexing.LexBuffer<char>
        //|> unbox
    printfn "%A" ctxt.CurrentToken
    printfn "%A" p.Lexeme
    printfn "%A" p.StartPos
    printfn "%A" p.EndPos
    printfn "start col: %d" p.StartPos.Column
    printfn "%A" (p.StartPos.AbsoluteOffset, ctxt.CurrentToken))


# 32 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | NEQ
  | EQP
  | EQM
  | INC
  | DECR
  | SET
  | LET
  | END
  | NEWLINE
  | COLON
  | ELSE
  | ELSEIF
  | IF
  | ACT
  | DOLLAR
  | SHARP
  | EOF
  | NO
  | OBJ
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | AMP
  | COMMA
  | AND
  | OR
  | MOD
  | EQ
  | GT
  | GE
  | LT
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ENDLOC
  | STARTLOC of (string)
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
  | COMMENT of (string)
  | TSTRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_NEQ
    | TOKEN_EQP
    | TOKEN_EQM
    | TOKEN_INC
    | TOKEN_DECR
    | TOKEN_SET
    | TOKEN_LET
    | TOKEN_END
    | TOKEN_NEWLINE
    | TOKEN_COLON
    | TOKEN_ELSE
    | TOKEN_ELSEIF
    | TOKEN_IF
    | TOKEN_ACT
    | TOKEN_DOLLAR
    | TOKEN_SHARP
    | TOKEN_EOF
    | TOKEN_NO
    | TOKEN_OBJ
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_AMP
    | TOKEN_COMMA
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_MOD
    | TOKEN_EQ
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_ENDLOC
    | TOKEN_STARTLOC
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_COMMENT
    | TOKEN_TSTRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM__startparseStatements
    | NONTERM_start
    | NONTERM_parseStatements
    | NONTERM_loc
    | NONTERM_end_
    | NONTERM_elseif
    | NONTERM_statements
    | NONTERM_states
    | NONTERM_id
    | NONTERM_temp
    | NONTERM_state
    | NONTERM_ass
    | NONTERM_assertOp
    | NONTERM_seq_
    | NONTERM_seqval
    | NONTERM_expr
    | NONTERM_val_

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | NEQ  -> 0 
  | EQP  -> 1 
  | EQM  -> 2 
  | INC  -> 3 
  | DECR  -> 4 
  | SET  -> 5 
  | LET  -> 6 
  | END  -> 7 
  | NEWLINE  -> 8 
  | COLON  -> 9 
  | ELSE  -> 10 
  | ELSEIF  -> 11 
  | IF  -> 12 
  | ACT  -> 13 
  | DOLLAR  -> 14 
  | SHARP  -> 15 
  | EOF  -> 16 
  | NO  -> 17 
  | OBJ  -> 18 
  | LPAREN  -> 19 
  | RPAREN  -> 20 
  | LBRACK  -> 21 
  | RBRACK  -> 22 
  | LBRACE  -> 23 
  | RBRACE  -> 24 
  | AMP  -> 25 
  | COMMA  -> 26 
  | AND  -> 27 
  | OR  -> 28 
  | MOD  -> 29 
  | EQ  -> 30 
  | GT  -> 31 
  | GE  -> 32 
  | LT  -> 33 
  | LE  -> 34 
  | PLUS  -> 35 
  | MINUS  -> 36 
  | TIMES  -> 37 
  | DIVIDE  -> 38 
  | ENDLOC  -> 39 
  | STARTLOC _ -> 40 
  | FLOAT _ -> 41 
  | INT _ -> 42 
  | ID _ -> 43 
  | COMMENT _ -> 44 
  | TSTRING _ -> 45 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_NEQ 
  | 1 -> TOKEN_EQP 
  | 2 -> TOKEN_EQM 
  | 3 -> TOKEN_INC 
  | 4 -> TOKEN_DECR 
  | 5 -> TOKEN_SET 
  | 6 -> TOKEN_LET 
  | 7 -> TOKEN_END 
  | 8 -> TOKEN_NEWLINE 
  | 9 -> TOKEN_COLON 
  | 10 -> TOKEN_ELSE 
  | 11 -> TOKEN_ELSEIF 
  | 12 -> TOKEN_IF 
  | 13 -> TOKEN_ACT 
  | 14 -> TOKEN_DOLLAR 
  | 15 -> TOKEN_SHARP 
  | 16 -> TOKEN_EOF 
  | 17 -> TOKEN_NO 
  | 18 -> TOKEN_OBJ 
  | 19 -> TOKEN_LPAREN 
  | 20 -> TOKEN_RPAREN 
  | 21 -> TOKEN_LBRACK 
  | 22 -> TOKEN_RBRACK 
  | 23 -> TOKEN_LBRACE 
  | 24 -> TOKEN_RBRACE 
  | 25 -> TOKEN_AMP 
  | 26 -> TOKEN_COMMA 
  | 27 -> TOKEN_AND 
  | 28 -> TOKEN_OR 
  | 29 -> TOKEN_MOD 
  | 30 -> TOKEN_EQ 
  | 31 -> TOKEN_GT 
  | 32 -> TOKEN_GE 
  | 33 -> TOKEN_LT 
  | 34 -> TOKEN_LE 
  | 35 -> TOKEN_PLUS 
  | 36 -> TOKEN_MINUS 
  | 37 -> TOKEN_TIMES 
  | 38 -> TOKEN_DIVIDE 
  | 39 -> TOKEN_ENDLOC 
  | 40 -> TOKEN_STARTLOC 
  | 41 -> TOKEN_FLOAT 
  | 42 -> TOKEN_INT 
  | 43 -> TOKEN_ID 
  | 44 -> TOKEN_COMMENT 
  | 45 -> TOKEN_TSTRING 
  | 48 -> TOKEN_end_of_input
  | 46 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM__startparseStatements 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_start 
    | 4 -> NONTERM_start 
    | 5 -> NONTERM_start 
    | 6 -> NONTERM_parseStatements 
    | 7 -> NONTERM_parseStatements 
    | 8 -> NONTERM_parseStatements 
    | 9 -> NONTERM_loc 
    | 10 -> NONTERM_loc 
    | 11 -> NONTERM_end_ 
    | 12 -> NONTERM_end_ 
    | 13 -> NONTERM_elseif 
    | 14 -> NONTERM_elseif 
    | 15 -> NONTERM_elseif 
    | 16 -> NONTERM_statements 
    | 17 -> NONTERM_statements 
    | 18 -> NONTERM_statements 
    | 19 -> NONTERM_statements 
    | 20 -> NONTERM_statements 
    | 21 -> NONTERM_statements 
    | 22 -> NONTERM_statements 
    | 23 -> NONTERM_statements 
    | 24 -> NONTERM_statements 
    | 25 -> NONTERM_statements 
    | 26 -> NONTERM_statements 
    | 27 -> NONTERM_statements 
    | 28 -> NONTERM_statements 
    | 29 -> NONTERM_statements 
    | 30 -> NONTERM_statements 
    | 31 -> NONTERM_statements 
    | 32 -> NONTERM_statements 
    | 33 -> NONTERM_states 
    | 34 -> NONTERM_states 
    | 35 -> NONTERM_states 
    | 36 -> NONTERM_states 
    | 37 -> NONTERM_id 
    | 38 -> NONTERM_id 
    | 39 -> NONTERM_temp 
    | 40 -> NONTERM_temp 
    | 41 -> NONTERM_temp 
    | 42 -> NONTERM_temp 
    | 43 -> NONTERM_state 
    | 44 -> NONTERM_state 
    | 45 -> NONTERM_state 
    | 46 -> NONTERM_state 
    | 47 -> NONTERM_state 
    | 48 -> NONTERM_state 
    | 49 -> NONTERM_state 
    | 50 -> NONTERM_ass 
    | 51 -> NONTERM_ass 
    | 52 -> NONTERM_ass 
    | 53 -> NONTERM_assertOp 
    | 54 -> NONTERM_assertOp 
    | 55 -> NONTERM_seq_ 
    | 56 -> NONTERM_seq_ 
    | 57 -> NONTERM_seqval 
    | 58 -> NONTERM_seqval 
    | 59 -> NONTERM_expr 
    | 60 -> NONTERM_expr 
    | 61 -> NONTERM_expr 
    | 62 -> NONTERM_expr 
    | 63 -> NONTERM_expr 
    | 64 -> NONTERM_expr 
    | 65 -> NONTERM_expr 
    | 66 -> NONTERM_expr 
    | 67 -> NONTERM_expr 
    | 68 -> NONTERM_expr 
    | 69 -> NONTERM_expr 
    | 70 -> NONTERM_expr 
    | 71 -> NONTERM_expr 
    | 72 -> NONTERM_expr 
    | 73 -> NONTERM_expr 
    | 74 -> NONTERM_expr 
    | 75 -> NONTERM_expr 
    | 76 -> NONTERM_expr 
    | 77 -> NONTERM_expr 
    | 78 -> NONTERM_expr 
    | 79 -> NONTERM_expr 
    | 80 -> NONTERM_expr 
    | 81 -> NONTERM_val_ 
    | 82 -> NONTERM_val_ 
    | 83 -> NONTERM_val_ 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 48 
let _fsyacc_tagOfErrorTerminal = 46

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | NEQ  -> "NEQ" 
  | EQP  -> "EQP" 
  | EQM  -> "EQM" 
  | INC  -> "INC" 
  | DECR  -> "DECR" 
  | SET  -> "SET" 
  | LET  -> "LET" 
  | END  -> "END" 
  | NEWLINE  -> "NEWLINE" 
  | COLON  -> "COLON" 
  | ELSE  -> "ELSE" 
  | ELSEIF  -> "ELSEIF" 
  | IF  -> "IF" 
  | ACT  -> "ACT" 
  | DOLLAR  -> "DOLLAR" 
  | SHARP  -> "SHARP" 
  | EOF  -> "EOF" 
  | NO  -> "NO" 
  | OBJ  -> "OBJ" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | AMP  -> "AMP" 
  | COMMA  -> "COMMA" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | MOD  -> "MOD" 
  | EQ  -> "EQ" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | ENDLOC  -> "ENDLOC" 
  | STARTLOC _ -> "STARTLOC" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 
  | COMMENT _ -> "COMMENT" 
  | TSTRING _ -> "TSTRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | NEQ  -> (null : System.Object) 
  | EQP  -> (null : System.Object) 
  | EQM  -> (null : System.Object) 
  | INC  -> (null : System.Object) 
  | DECR  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | ELSEIF  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ACT  -> (null : System.Object) 
  | DOLLAR  -> (null : System.Object) 
  | SHARP  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | NO  -> (null : System.Object) 
  | OBJ  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | ENDLOC  -> (null : System.Object) 
  | STARTLOC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 3us; 65535us; 0us; 1us; 6us; 7us; 8us; 9us; 2us; 65535us; 2us; 3us; 10us; 11us; 3us; 65535us; 0us; 8us; 6us; 8us; 8us; 8us; 0us; 65535us; 2us; 65535us; 22us; 23us; 88us; 102us; 24us; 65535us; 2us; 13us; 10us; 13us; 15us; 16us; 21us; 22us; 25us; 26us; 29us; 30us; 34us; 35us; 37us; 38us; 40us; 41us; 44us; 45us; 50us; 51us; 56us; 57us; 62us; 63us; 64us; 65us; 67us; 68us; 73us; 74us; 79us; 80us; 85us; 86us; 87us; 88us; 90us; 91us; 94us; 95us; 97us; 98us; 100us; 101us; 104us; 105us; 33us; 65535us; 2us; 28us; 10us; 28us; 15us; 28us; 21us; 28us; 25us; 28us; 29us; 28us; 34us; 28us; 37us; 28us; 40us; 28us; 44us; 28us; 48us; 49us; 50us; 28us; 54us; 55us; 56us; 28us; 60us; 61us; 62us; 28us; 64us; 28us; 67us; 28us; 71us; 72us; 73us; 28us; 77us; 78us; 79us; 28us; 83us; 84us; 85us; 28us; 87us; 28us; 90us; 28us; 92us; 93us; 94us; 28us; 97us; 28us; 100us; 28us; 104us; 28us; 107us; 112us; 110us; 111us; 35us; 65535us; 2us; 117us; 10us; 117us; 15us; 117us; 21us; 117us; 25us; 117us; 29us; 117us; 34us; 117us; 37us; 117us; 40us; 117us; 44us; 117us; 48us; 117us; 50us; 117us; 54us; 117us; 56us; 117us; 60us; 117us; 62us; 117us; 64us; 117us; 67us; 117us; 71us; 117us; 73us; 117us; 77us; 117us; 79us; 117us; 83us; 117us; 85us; 117us; 87us; 117us; 90us; 117us; 92us; 117us; 94us; 117us; 97us; 117us; 100us; 117us; 104us; 117us; 107us; 117us; 110us; 117us; 138us; 139us; 140us; 141us; 33us; 65535us; 2us; 134us; 10us; 134us; 15us; 134us; 21us; 134us; 25us; 134us; 29us; 134us; 34us; 134us; 37us; 134us; 40us; 134us; 44us; 134us; 48us; 134us; 50us; 134us; 54us; 134us; 56us; 134us; 60us; 134us; 62us; 134us; 64us; 134us; 67us; 134us; 71us; 134us; 73us; 134us; 77us; 134us; 79us; 134us; 83us; 134us; 85us; 134us; 87us; 134us; 90us; 134us; 92us; 134us; 94us; 134us; 97us; 134us; 100us; 134us; 104us; 134us; 107us; 134us; 110us; 134us; 33us; 65535us; 2us; 106us; 10us; 106us; 15us; 106us; 21us; 106us; 25us; 106us; 29us; 106us; 34us; 106us; 37us; 106us; 40us; 106us; 44us; 106us; 48us; 106us; 50us; 106us; 54us; 106us; 56us; 106us; 60us; 106us; 62us; 106us; 64us; 106us; 67us; 106us; 71us; 106us; 73us; 106us; 77us; 106us; 79us; 106us; 83us; 106us; 85us; 106us; 87us; 106us; 90us; 106us; 92us; 106us; 94us; 106us; 97us; 106us; 100us; 106us; 104us; 106us; 107us; 106us; 110us; 106us; 33us; 65535us; 2us; 142us; 10us; 142us; 15us; 142us; 21us; 142us; 25us; 142us; 29us; 142us; 34us; 142us; 37us; 142us; 40us; 142us; 44us; 142us; 48us; 142us; 50us; 142us; 54us; 142us; 56us; 142us; 60us; 142us; 62us; 142us; 64us; 142us; 67us; 142us; 71us; 142us; 73us; 142us; 77us; 142us; 79us; 142us; 83us; 142us; 85us; 142us; 87us; 142us; 90us; 142us; 92us; 142us; 94us; 142us; 97us; 142us; 100us; 142us; 104us; 142us; 107us; 142us; 110us; 142us; 33us; 65535us; 2us; 31us; 10us; 31us; 15us; 31us; 21us; 31us; 25us; 31us; 29us; 31us; 34us; 31us; 37us; 31us; 40us; 31us; 44us; 31us; 48us; 125us; 50us; 31us; 54us; 125us; 56us; 31us; 60us; 125us; 62us; 31us; 64us; 31us; 67us; 31us; 71us; 125us; 73us; 31us; 77us; 125us; 79us; 31us; 83us; 125us; 85us; 31us; 87us; 31us; 90us; 31us; 92us; 125us; 94us; 31us; 97us; 31us; 100us; 31us; 104us; 31us; 107us; 125us; 110us; 125us; 10us; 65535us; 46us; 47us; 58us; 59us; 81us; 82us; 108us; 109us; 117us; 137us; 121us; 122us; 143us; 144us; 147us; 148us; 151us; 153us; 155us; 156us; 0us; 65535us; 36us; 65535us; 18us; 19us; 32us; 127us; 46us; 146us; 52us; 53us; 58us; 146us; 69us; 70us; 75us; 76us; 81us; 146us; 108us; 146us; 117us; 146us; 118us; 120us; 121us; 146us; 126us; 127us; 130us; 131us; 132us; 133us; 135us; 136us; 143us; 146us; 147us; 146us; 151us; 146us; 155us; 146us; 158us; 159us; 160us; 161us; 162us; 163us; 178us; 165us; 179us; 166us; 182us; 167us; 183us; 168us; 184us; 169us; 185us; 170us; 186us; 171us; 187us; 172us; 188us; 173us; 189us; 174us; 190us; 175us; 191us; 176us; 192us; 177us; 37us; 65535us; 18us; 149us; 32us; 149us; 46us; 149us; 52us; 149us; 58us; 149us; 69us; 149us; 75us; 149us; 81us; 149us; 108us; 149us; 117us; 149us; 118us; 149us; 121us; 149us; 126us; 149us; 128us; 129us; 130us; 149us; 132us; 149us; 135us; 149us; 143us; 149us; 147us; 149us; 151us; 149us; 155us; 149us; 158us; 149us; 160us; 149us; 162us; 149us; 178us; 149us; 179us; 149us; 182us; 149us; 183us; 149us; 184us; 149us; 185us; 149us; 186us; 149us; 187us; 149us; 188us; 149us; 189us; 149us; 190us; 149us; 191us; 149us; 192us; 149us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 6us; 9us; 13us; 14us; 17us; 42us; 76us; 112us; 146us; 180us; 214us; 248us; 259us; 260us; 297us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 9us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 3us; 13us; 14us; 15us; 16us; 13us; 14us; 15us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 3us; 13us; 14us; 15us; 3us; 13us; 14us; 15us; 3us; 13us; 14us; 15us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 5us; 19us; 43us; 44us; 45us; 46us; 3us; 19us; 43us; 44us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 4us; 22us; 23us; 24us; 25us; 4us; 22us; 23us; 24us; 25us; 4us; 22us; 23us; 24us; 25us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 14us; 23us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 7us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 20us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 7us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 2us; 26us; 30us; 1us; 26us; 1us; 26us; 1us; 27us; 14us; 27us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 3us; 29us; 31us; 32us; 3us; 29us; 31us; 32us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 4us; 33us; 34us; 35us; 36us; 3us; 33us; 34us; 35us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 37us; 1us; 38us; 1us; 38us; 5us; 39us; 40us; 41us; 49us; 50us; 3us; 40us; 41us; 66us; 1us; 40us; 15us; 41us; 66us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 4us; 43us; 44us; 45us; 46us; 2us; 43us; 44us; 14us; 43us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 5us; 44us; 60us; 61us; 62us; 63us; 1us; 44us; 1us; 45us; 14us; 45us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 46us; 14us; 46us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 2us; 47us; 48us; 1us; 48us; 14us; 48us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 49us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 2us; 53us; 54us; 1us; 54us; 1us; 54us; 1us; 54us; 15us; 55us; 56us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 55us; 1us; 55us; 1us; 59us; 4us; 60us; 61us; 62us; 63us; 2us; 61us; 62us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 63us; 1us; 64us; 14us; 64us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 65us; 14us; 65us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 66us; 14us; 66us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 1us; 66us; 14us; 67us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 73us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 75us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 76us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 77us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 78us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 79us; 80us; 14us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 80us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 79us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 83us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 41us; 58us; 62us; 66us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 92us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; 122us; 127us; 132us; 137us; 139us; 141us; 143us; 145us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 198us; 219us; 227us; 230us; 232us; 234us; 236us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 275us; 279us; 281us; 283us; 285us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 318us; 322us; 324us; 326us; 328us; 330us; 332us; 334us; 336us; 338us; 340us; 346us; 350us; 352us; 368us; 370us; 372us; 374us; 376us; 381us; 384us; 399us; 405us; 407us; 409us; 424us; 426us; 441us; 444us; 446us; 461us; 463us; 465us; 467us; 469us; 471us; 474us; 476us; 478us; 480us; 496us; 498us; 500us; 502us; 507us; 510us; 512us; 514us; 516us; 518us; 520us; 522us; 524us; 539us; 541us; 556us; 558us; 573us; 575us; 590us; 605us; 620us; 635us; 650us; 665us; 680us; 695us; 710us; 725us; 740us; 755us; 770us; 772us; 774us; 776us; 778us; 780us; 782us; 784us; 786us; 788us; 790us; 792us; 794us; 796us; 798us; 800us; 802us; 804us; |]
let _fsyacc_action_rows = 196
let _fsyacc_actionTableElements = [|4us; 32768us; 8us; 6us; 16us; 5us; 40us; 14us; 46us; 4us; 0us; 49152us; 12us; 16400us; 5us; 138us; 6us; 140us; 8us; 10us; 9us; 42us; 12us; 69us; 13us; 46us; 16us; 12us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 49152us; 4us; 16386us; 8us; 16393us; 16us; 16393us; 40us; 16393us; 46us; 16393us; 0us; 16387us; 4us; 32768us; 8us; 6us; 16us; 5us; 40us; 14us; 46us; 4us; 0us; 16388us; 4us; 32768us; 8us; 6us; 16us; 5us; 40us; 14us; 46us; 4us; 0us; 16389us; 12us; 16400us; 5us; 138us; 6us; 140us; 8us; 10us; 9us; 42us; 12us; 69us; 13us; 46us; 16us; 12us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 1us; 32768us; 8us; 15us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 1us; 32768us; 39us; 17us; 0us; 16394us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 14us; 32768us; 0us; 189us; 9us; 20us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 1us; 32768us; 8us; 21us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 2us; 16397us; 10us; 24us; 11us; 18us; 0us; 16398us; 1us; 32768us; 8us; 25us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16399us; 0us; 16401us; 1us; 32768us; 8us; 29us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16402us; 3us; 32768us; 1us; 130us; 2us; 132us; 30us; 32us; 9us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 23us; 33us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 128us; 45us; 195us; 1us; 32768us; 8us; 34us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 1us; 32768us; 24us; 36us; 1us; 32768us; 8us; 37us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16403us; 1us; 32768us; 8us; 40us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16404us; 1us; 32768us; 43us; 43us; 1us; 32768us; 8us; 44us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16405us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 1us; 32768us; 9us; 48us; 8us; 32768us; 5us; 138us; 6us; 140us; 8us; 64us; 12us; 52us; 13us; 58us; 37us; 115us; 43us; 114us; 45us; 124us; 1us; 32768us; 8us; 50us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16406us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 14us; 32768us; 0us; 189us; 9us; 54us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 5us; 32768us; 5us; 138us; 6us; 140us; 37us; 115us; 43us; 114us; 45us; 124us; 1us; 32768us; 8us; 56us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16407us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 1us; 32768us; 9us; 60us; 5us; 32768us; 5us; 138us; 6us; 140us; 37us; 115us; 43us; 114us; 45us; 124us; 1us; 32768us; 8us; 62us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16408us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 1us; 32768us; 7us; 66us; 1us; 32768us; 8us; 67us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16409us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 14us; 32768us; 0us; 189us; 9us; 71us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 8us; 32768us; 5us; 138us; 6us; 140us; 8us; 87us; 12us; 75us; 13us; 81us; 37us; 115us; 43us; 114us; 45us; 124us; 2us; 32768us; 8us; 73us; 10us; 92us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16410us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 14us; 32768us; 0us; 189us; 9us; 77us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 5us; 32768us; 5us; 138us; 6us; 140us; 37us; 115us; 43us; 114us; 45us; 124us; 1us; 32768us; 8us; 79us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16411us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 1us; 32768us; 9us; 83us; 5us; 32768us; 5us; 138us; 6us; 140us; 37us; 115us; 43us; 114us; 45us; 124us; 1us; 32768us; 8us; 85us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16412us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 3us; 32768us; 7us; 89us; 10us; 96us; 11us; 18us; 1us; 32768us; 8us; 90us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16413us; 5us; 32768us; 5us; 138us; 6us; 140us; 37us; 115us; 43us; 114us; 45us; 124us; 1us; 32768us; 8us; 94us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16414us; 1us; 32768us; 8us; 97us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 1us; 32768us; 7us; 99us; 1us; 32768us; 8us; 100us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16415us; 1us; 32768us; 7us; 103us; 1us; 32768us; 8us; 104us; 10us; 16400us; 5us; 138us; 6us; 140us; 9us; 42us; 12us; 69us; 13us; 46us; 37us; 115us; 43us; 114us; 44us; 39us; 45us; 124us; 46us; 27us; 0us; 16416us; 1us; 16420us; 25us; 107us; 7us; 32768us; 5us; 138us; 6us; 140us; 13us; 108us; 37us; 115us; 43us; 114us; 44us; 113us; 45us; 124us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 1us; 32768us; 9us; 110us; 5us; 32768us; 5us; 138us; 6us; 140us; 37us; 115us; 43us; 114us; 45us; 124us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16421us; 1us; 32768us; 43us; 116us; 0us; 16422us; 12us; 16423us; 1us; 16434us; 2us; 16434us; 17us; 158us; 18us; 160us; 19us; 118us; 21us; 16434us; 30us; 16434us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 9us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 20us; 119us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 0us; 16424us; 15us; 32768us; 0us; 189us; 20us; 164us; 26us; 121us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 1us; 32768us; 20us; 123us; 0us; 16425us; 0us; 16426us; 3us; 32768us; 1us; 130us; 2us; 132us; 30us; 126us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 128us; 45us; 195us; 13us; 16427us; 0us; 189us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 5us; 16444us; 19us; 151us; 21us; 155us; 41us; 194us; 42us; 193us; 45us; 195us; 0us; 16428us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 13us; 16429us; 0us; 189us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 13us; 16430us; 0us; 189us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 1us; 16431us; 35us; 135us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 13us; 16432us; 0us; 189us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 0us; 16433us; 2us; 32768us; 37us; 115us; 43us; 114us; 0us; 16435us; 2us; 32768us; 37us; 115us; 43us; 114us; 0us; 16436us; 1us; 16437us; 21us; 143us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 1us; 32768us; 22us; 145us; 0us; 16438us; 14us; 16440us; 0us; 189us; 26us; 147us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 0us; 16439us; 0us; 16443us; 2us; 16444us; 19us; 151us; 21us; 155us; 9us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 20us; 152us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 0us; 16445us; 1us; 32768us; 20us; 154us; 0us; 16446us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 1us; 32768us; 22us; 157us; 0us; 16447us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 11us; 16448us; 0us; 189us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 5us; 16449us; 29us; 192us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 14us; 32768us; 0us; 189us; 20us; 164us; 27us; 190us; 28us; 191us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 0us; 16450us; 3us; 16451us; 29us; 192us; 37us; 182us; 38us; 183us; 3us; 16452us; 29us; 192us; 37us; 182us; 38us; 183us; 0us; 16454us; 0us; 16455us; 5us; 16456us; 29us; 192us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 5us; 16457us; 29us; 192us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 5us; 16458us; 29us; 192us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 5us; 16459us; 29us; 192us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 5us; 16460us; 29us; 192us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 5us; 16461us; 29us; 192us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 11us; 16462us; 0us; 189us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 12us; 16463us; 0us; 189us; 27us; 190us; 29us; 192us; 30us; 184us; 31us; 185us; 32us; 186us; 33us; 187us; 34us; 188us; 35us; 178us; 36us; 179us; 37us; 182us; 38us; 183us; 2us; 16464us; 37us; 182us; 38us; 183us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 1us; 32768us; 42us; 181us; 0us; 16453us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 8us; 32768us; 17us; 158us; 18us; 160us; 19us; 162us; 36us; 180us; 41us; 194us; 42us; 193us; 43us; 150us; 45us; 195us; 0us; 16465us; 0us; 16466us; 0us; 16467us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 19us; 20us; 25us; 26us; 31us; 32us; 37us; 38us; 51us; 52us; 53us; 54us; 56us; 67us; 69us; 70us; 79us; 94us; 96us; 107us; 110us; 111us; 113us; 124us; 125us; 126us; 128us; 139us; 140us; 144us; 154us; 156us; 167us; 169us; 171us; 182us; 183us; 185us; 196us; 197us; 199us; 201us; 212us; 213us; 222us; 224us; 233us; 235us; 246us; 247us; 256us; 271us; 277us; 279us; 290us; 291us; 300us; 302us; 308us; 310us; 321us; 322us; 333us; 335us; 337us; 348us; 349us; 358us; 373us; 382us; 385us; 396us; 397us; 406us; 421us; 427us; 429us; 440us; 441us; 450us; 452us; 458us; 460us; 471us; 472us; 483us; 487us; 489us; 500us; 501us; 507us; 509us; 520us; 521us; 523us; 534us; 536us; 538us; 549us; 550us; 552us; 554us; 565us; 566us; 568us; 576us; 585us; 587us; 593us; 594us; 595us; 596us; 597us; 599us; 600us; 613us; 623us; 624us; 640us; 649us; 651us; 652us; 653us; 657us; 666us; 680us; 686us; 687us; 696us; 710us; 719us; 733us; 735us; 744us; 758us; 759us; 762us; 763us; 766us; 767us; 769us; 778us; 780us; 781us; 796us; 805us; 806us; 807us; 810us; 820us; 821us; 823us; 824us; 833us; 835us; 836us; 845us; 857us; 866us; 872us; 881us; 896us; 897us; 901us; 905us; 906us; 907us; 913us; 919us; 925us; 931us; 937us; 943us; 955us; 968us; 971us; 980us; 989us; 991us; 992us; 1001us; 1010us; 1019us; 1028us; 1037us; 1046us; 1055us; 1064us; 1073us; 1082us; 1091us; 1092us; 1093us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 2us; 2us; 2us; 1us; 1us; 1us; 4us; 0us; 1us; 5us; 6us; 8us; 0us; 1us; 3us; 8us; 3us; 4us; 6us; 9us; 9us; 8us; 6us; 9us; 9us; 8us; 8us; 11us; 9us; 6us; 3us; 3us; 1us; 1us; 2us; 1us; 3us; 6us; 1us; 3us; 4us; 3us; 3us; 1us; 3us; 2us; 1us; 2us; 2us; 1us; 4us; 3us; 1us; 3us; 1us; 1us; 1us; 3us; 4us; 4us; 2us; 2us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16387us; 65535us; 16388us; 65535us; 16389us; 65535us; 16390us; 16391us; 16392us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 16399us; 16401us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 16418us; 16419us; 16421us; 65535us; 16422us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 16425us; 16426us; 65535us; 65535us; 65535us; 65535us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16433us; 65535us; 16435us; 65535us; 16436us; 65535us; 65535us; 65535us; 16438us; 65535us; 65535us; 16439us; 16443us; 65535us; 65535us; 16445us; 65535us; 16446us; 65535us; 65535us; 16447us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16450us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16453us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16465us; 16466us; 16467us; |]
let _fsyacc_reductions ()  =    [| 
# 457 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : QS.Location list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 466 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : QS.Statements list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startparseStatements));
# 475 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                except "blah-blah" 
                   )
# 87 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : QS.Location list));
# 485 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                              [] 
                   )
# 88 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : QS.Location list));
# 495 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : QS.Location list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                           _2 
                   )
# 89 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : QS.Location list));
# 506 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'loc)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : QS.Location list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                       _1::_2 
                   )
# 90 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : QS.Location list));
# 518 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : QS.Statements list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     _2 
                   )
# 93 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : QS.Statements list));
# 529 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                              [] 
                   )
# 94 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : QS.Statements list));
# 539 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                     _1 
                   )
# 95 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : QS.Statements list));
# 550 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                except "error in loc" 
                   )
# 98 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'loc));
# 560 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                    Location(_1, _3) 
                   )
# 101 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'loc));
# 572 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                             failwithf "отсутствует end" 
                   )
# 105 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'end_));
# 582 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                 
                   )
# 106 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'end_));
# 592 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                  [If(_2, _5, [])] 
                   )
# 109 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'elseif));
# 604 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'elseif)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                         [If(_2, _5, _6)] 
                   )
# 110 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'elseif));
# 617 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                       [If(_2, _5, _8)] 
                   )
# 111 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'elseif));
# 630 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                             [] 
                   )
# 114 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 640 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                except "statements" 
                   )
# 115 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 650 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                       _1@_3 
                   )
# 116 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 662 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'assertOp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                              AssertCode(_1, _5) :: _8 
                   )
# 117 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 675 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                        Comment _1::_3 
                   )
# 118 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 687 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                         Sign _2::_4 
                   )
# 119 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 699 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                   Act(_2, _4)::_6 
                   )
# 121 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 712 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                    Act(_2, [If(_5, _7, [])])::_9 
                   )
# 122 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 726 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                  Act(_2, [Act(_5, _7)])::_9 
                   )
# 123 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 740 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                   Act(_2, _5)::_8 
                   )
# 124 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 753 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                     If(_2, _4, [])::_6 
                   )
# 126 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 766 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                If(_2, [If(_5, _7, [])], [])::_9 
                   )
# 127 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 780 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                 If(_2, [Act(_5, _7)], [])::_9 
                   )
# 128 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 794 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                     If(_2, _5, [])::_8 
                   )
# 129 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 807 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                              If(_2, _4, _6)::_8 
                   )
# 131 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 821 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                                             If(_2, _5, _8)::_11 
                   )
# 132 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 835 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'elseif)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                                                         If(_2, _5, _6)::_9 
                   )
# 133 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'statements));
# 849 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'state)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                          _1::[Act(_4, _6)] 
                   )
# 143 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'states));
# 862 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'state)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'states)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                              _1 :: _3 
                   )
# 144 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'states));
# 874 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'state)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                               _1::[Comment _3] 
                   )
# 145 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'states));
# 886 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'state)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                   [_1] 
                   )
# 146 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'states));
# 897 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                _1 
                   )
# 149 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'id));
# 908 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                      "*" + _2 
                   )
# 150 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'id));
# 919 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                             Func(_1, []) 
                   )
# 152 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'temp));
# 930 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                           Func(_1, []) 
                   )
# 153 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'temp));
# 941 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                           Func(_1, _3::_5) 
                   )
# 154 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'temp));
# 954 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                  Val(value.String _1) 
                   )
# 155 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'temp));
# 965 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'assertOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                              Assert( _1, _3 ) 
                   )
# 158 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'state));
# 977 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'assertOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'val_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                              Assert( _1, Func(_3, [Val _4]) ) 
                   )
# 159 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'state));
# 990 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'assertOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                            Assert( _1, Expr(Plus, _1, _3) ) 
                   )
# 160 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'state));
# 1002 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'assertOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                            Assert( _1, Expr(Minus, _1, _3) ) 
                   )
# 161 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'state));
# 1014 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'temp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                               ExprS _1 
                   )
# 171 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'state));
# 1025 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'temp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                         ExprS( Expr(Plus, _1, _3) ) 
                   )
# 172 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'state));
# 1037 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                  FuncS(_1, _2) 
                   )
# 173 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'state));
# 1049 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                             Var _1 
                   )
# 176 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'ass));
# 1060 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                    Var _2 
                   )
# 177 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'ass));
# 1071 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                    Var _2 
                   )
# 178 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'ass));
# 1082 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ass)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                              _1 
                   )
# 183 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'assertOp));
# 1093 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ass)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                 Func("idx", _1::_3) 
                   )
# 184 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'assertOp));
# 1105 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                             _1 :: _3 
                   )
# 187 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'seq_));
# 1117 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                  [_1] 
                   )
# 188 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'seq_));
# 1128 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'val_)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqval)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                               (Val _1)::_3 
                   )
# 192 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'seqval));
# 1140 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'val_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                  [Val _1] 
                   )
# 193 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'seqval));
# 1151 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'val_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                  Val _1 
                   )
# 197 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1162 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                Var _1 
                   )
# 198 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1173 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Func(_1, []) 
                   )
# 199 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1184 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Func(_1, _3) 
                   )
# 200 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1196 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Func("idx", (Var _1)::_3) 
                   )
# 201 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1208 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                  UnarExpr(No, _2) 
                   )
# 203 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1219 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                   UnarExpr(Obj, _2) 
                   )
# 204 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1230 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     _2 
                   )
# 206 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1241 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Plus, _1, _3) 
                   )
# 208 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1253 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Minus, _1, _3) 
                   )
# 209 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1265 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Val(Int -_2) 
                   )
# 210 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1276 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Times, _1, _3) 
                   )
# 211 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1288 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Divide, _1, _3) 
                   )
# 212 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1300 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Eq, _1, _3) 
                   )
# 213 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1312 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Gt, _1, _3) 
                   )
# 214 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1324 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Ge, _1, _3) 
                   )
# 215 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1336 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Lt, _1, _3) 
                   )
# 216 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1348 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Le, _1, _3) 
                   )
# 217 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1360 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Ne, _1, _3) 
                   )
# 218 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1372 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(And, _1, _3) 
                   )
# 219 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1384 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                     Expr.Expr(Or, _1, _3) 
                   )
# 220 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1396 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                                  Expr(Mod, _1, _3) 
                   )
# 221 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'expr));
# 1408 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                 Int _1 
                   )
# 224 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'val_));
# 1419 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                   Float _1 
                   )
# 225 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'val_));
# 1430 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                                     value.String _1 
                   )
# 226 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fsp"
                 : 'val_));
|]
# 1442 "c:\All\Project\Parsers\QSParse\QSParse\QSParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 49;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : QS.Location list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let parseStatements lexer lexbuf : QS.Statements list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
