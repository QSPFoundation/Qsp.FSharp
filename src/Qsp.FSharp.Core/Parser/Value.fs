[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
module Qsp.Parser.Ast.Value

module Parser =
    open FParsec

    open Qsp.Ast
    open Qsp.Tokens
    open Qsp.Parser.Generic

    let stringLiteralWithToken pexpr (pstmts: Statements Parser) : _ Parser =
        let bet tokenType openedChar closedChar pnested punnested pgetNested =
            let p nestedCount =
                many1Satisfy (fun c' -> not (c' = closedChar || c' = '\n' || c' = '<'))
                <|> (pstring (charsReplicate (pown 2 nestedCount) closedChar) // 1 2, 2 4
                    >>% string closedChar)
                <|> (skipChar '<' >>? notFollowedBy (skipChar '<' <|> skipChar 'a' <|> skipString "/a>") >>% "<")
            let pattValBody nestedCount closedCharAtt =
                many1Satisfy (fun c' -> not (c' = closedChar || c' = '\n' || c' = '&' || c' = closedCharAtt))
                <|> (pstring (charsReplicate (pown 2 nestedCount) closedChar)
                    >>% string closedChar)
                <|> (pchar '&'
                    >>. ((pstring "quot" >>% "\"" <|> pstring "apos" >>% "'") .>> pchar ';'
                        <|>% "&") )
                // <|> (skipChar '<' >>? notFollowedBy (skipChar '<' <|> skipChar 'a' <|> skipString "/a>") >>% "<")
            let plineKind nestedCount =
                let plineKind, plineKindRef = createParserForwardedToRef()
                let plineKinds =
                    pipe2
                        (many plineKind)
                        (many
                            (newline >>. many plineKind))
                        (fun x xs -> x::xs)
                let pATag =
                    // –ê –≤–æ—Ç –∑–¥–µ—Å—å –≤–æ–æ–±—â–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–µ–ª—é–±–æ–ø—ã—Ç–Ω–∞—è —à—Ç—É–∫–∞:
                    // 1. –í—Å–µ `"` —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è –≤ `&quot;`, –∞ —Å–∞–º `&` ‚Äî –≤ `&amp;`
                    // 2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â–µ –≤–ª–æ–∂–∏—Ç—å, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `&quot;&quot;`
                    pstring "<a href=\"exec:"
                    >>. (attempt // TODO: –ï—Å–ª–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –∞—Ç—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ—Ç—É –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—ã—Ç–∞—Ç–∞—Ç—å—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏. –ö —á–µ—Ä—Ç—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≥–ª–∞–≤–Ω–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å
                        (pHtmlAttDoubleNested
                            >>. spaces >>. notEmpty pstmts
                            .>> pHtmlAttDoubleUnnested
                            |>> StaticStmts)
                        <|> (appendToken tokenType (many1Strings (pattValBody nestedCount '"')) // TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.
                            |>> Raw))
                    .>> pchar '"' .>> spaces .>> pchar '>' // —á—Ç–æ –∂, –Ω–µ –≤—Å—ë —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ. –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º `pstmts` –≤—Å–µ `stringLiteral` –∑–∞–º–µ—Å—Ç–æ –ø—Ä–∏–≤—ã—á–Ω—ã—Ö `"` –∏ `'` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–±–æ `&quot;` –∏ `''`, –ª–∏–±–æ `&apos;`. –î–∞ –µ—â–µ –∏ `&` —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤ `&amp;`. –ò –≤—Å—ë —ç—Ç–æ –∫—É—á—É —Ä–∞–∑ –≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –∏ –ø–µ—Ä–µ–≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è. –ß–µ—Å—Ç–Ω–æ —Å–∫–∞–∑–∞—Ç—å, –≥–æ–ª–æ–≤–∞ –ø—É—Ö–Ω–µ—Ç –æ—Ç –≤—Å–µ—Ö —ç—Ç–∏—Ö —Å—Ç—Ä–∞—Å—Ç–µ–π. –ê –µ—â–µ –Ω–∞ `if` –∂–∞–ª–æ–≤–∞–ª—Å—è, –Ω—É-–Ω—É.
                    .>>. plineKinds .>> pstring "</a>" // –≤–æ—Ç –Ω–∞–¥–æ –±—ã–ª–∏ —Ç–µ–±–µ —ç—Ç–∏ –¥—É—Ä–∞—Ü–∫–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è? –ï—â–µ —Å–∫–∞–∂–∏, —á—Ç–æ —Ö–æ—Ç–µ–ª –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTML-parser —Å–¥–µ–ª–∞—Ç—å. –û–π, —Ç–æ—á–Ω–æ, —Ö–æ—á–µ—Ç! –•–∞-—Ö–∞.
                    |>> fun (stmts, line) -> HyperLinkKind(stmts, line) // –í–æ—Ç —Å–º–æ—Ç—Ä—é —è –Ω–∞ —ç—Ç–∏ –±—ã–ª–∏–Ω—ã –∏ –¥–∏–≤—É –¥–∞—é—Å—å, –ø—Ä–∞–≤–æ —Å–ª–æ–≤–æ. –≠—Ç–æ –∂ –Ω–∞–¥–æ –±—ã–ª–æ –¥–æ —Ç–∞–∫–æ–≥–æ –¥–æ–¥—É–º–∞—Ç—å—Å—è. –ú–µ—Ç–∞–º–µ—Ç–∞–º–µ—Ç–∞...–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫–æ–µ-—Ç–æ
                plineKindRef.Value <-
                    appendToken tokenType (many1Strings (p nestedCount)) |>> StringKind
                    <|> (appendToken TokenType.InterpolationBegin (pstring "<<")
                        >>. (ws >>. pexpr |>> ExprKind) // —ç—Ç–æ –º–æ–∂–µ—Ç *–Ω–µ–º–Ω–æ–≥–æ* –∑–∞–ø—É—Ç–∞—Ç—å, –Ω–æ, —ç–º, –Ω–æ –µ—Å—Ç—å –∫–∞–∫–æ–µ-—Ç–æ "–Ω–æ", –¥–∞... –ù–∏–∫–∞–∫–æ–≥–æ "–Ω–æ" –Ω–µ—Ç—É ‚Äî –∫–æ–¥ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π üò≠. –¢–∞–∫, –∑–¥–µ—Å—å —ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏—è ‚Äî –≤–Ω—É—Ç—Ä–∏ —ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø–æ—Ä–æ–∂–¥–∞–µ—Ç –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫. –Ø —Å–¥–µ–ª–∞–ª –≤—Å–µ–≥–æ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –∏ –Ω–∞–∏–≤–Ω–æ –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ–≥–æ —Ö–≤–∞—Ç–∏—Ç. –¢–æ –µ—Å—Ç—å —Å–µ–π—á–∞—Å –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ—Ç —ç—Ç—É –∑–≤–µ—Ä—é–≥—É: `'<<''<<''''x''''>>''>>'`. –°—Ç—Ä–∞—à–Ω–æ, –ø—Ä–∞–≤–¥–∞? –ù–æ —á—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∏–ª, —Ä–∞–±–æ—Ç–∞–µ—Ç, —á—Ç–æ –µ—â–µ –±–æ–ª—å—à–µ —É–∂–∞—Å–∞–µ—Ç. –ò `'<<''<<''''<<''''''''—ç—Ç–æ —á—É–¥–æ–≤–∏—â–µ''''''''>>''''>>''>>'` —Ä–∞–±–æ—Ç–∞–µ—Ç...
                        .>> ws .>> appendToken TokenType.InterpolationEnd (pstring ">>"))
                    <|> attempt pATag // TODO: —Ç—É—Ç –±—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –Ω–µ –ø–æ–º–µ—à–∞–ª–æ: –º–æ–ª, –Ω–µ –æ—Å–∏–ª–∏–ª
                plineKind <|> (pchar '<' >>% StringKind "<")
            pgetNested >>=? fun nestedCount ->
            let pOpened = pstring (charsReplicate (pown 2 nestedCount) openedChar)
            let pClosed = pstring (charsReplicate (pown 2 nestedCount) closedChar)
            let plineKind = plineKind (nestedCount + 1)

            appendToken tokenType (pOpened .>> pnested)
            >>. pipe2
                    (many plineKind)
                    (many
                        (newline >>. many plineKind)
                    .>> punnested
                    .>> appendToken tokenType pClosed) // TODO: –ó–¥–µ—Å—å —Å–∞–º–æ–µ —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `PunctuationDefinitionStringEnd`
                    (fun x xs -> (x:Line)::xs)
        bet TokenType.StringQuotedSingle '\'' '\'' pSingleNested pSingleUnnested pGetSingleNested
        <|> (pGetHtmlAttDoubleNested >>=? fun x ->
            if x > 0 then
                fail "not implemented HtmlAttDoubleNested"
            else
                bet TokenType.StringQuotedDouble '"' '"' pDoubleNested pDoubleUnnested pGetDoubleNested)

    let pvalue pexpr pstmts : Value Parser =
        choice [
            stringLiteralWithToken pexpr pstmts |>> String

            appendToken TokenType.ConstantNumericInteger (
                pint32 |>> Int
            )
        ]
